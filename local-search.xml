<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>CF IO交互 学习</title>
    <link href="/2021/07/06/pre-CF-Interaction/"/>
    <url>/2021/07/06/pre-CF-Interaction/</url>
    
    <content type="html"><![CDATA[<p>我们需要使用 <code>testlib.h</code>。</p><p><code>command</code></p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">(./std &lt; /dev/fd/<span class="hljs-number">3</span> | ./interactor <span class="hljs-keyword">in</span> out) <span class="hljs-number">3</span>&gt;&amp;<span class="hljs-number">1</span> | :<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>interaction</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>局部最小值</title>
    <link href="/2021/07/06/cqoi2012-partial-minimum/"/>
    <url>/2021/07/06/cqoi2012-partial-minimum/</url>
    
    <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/P3160">Link</a></p><p>有意思的 <span class="math inline">\(dp\)</span>。</p><hr /><p>首先不难想到把 <span class="math inline">\(X\)</span> 与周围建出偏序关系的 <span class="math inline">\(dag\)</span>，转化出来的问题大概是问你这个 <span class="math inline">\(dag\)</span> 有多少种拓扑序。</p><p>但是你会发现，你给定 <span class="math inline">\(dag\)</span> 的拓扑序有可能 “夹带私货”。</p><p>就是体现不出来 . 与周围的关系，可能存在某个 . 在你给定的拓扑序中其实是 <span class="math inline">\(X\)</span>。</p><p>这个很好办，容斥即可。</p><hr /><p>那么你怎么算给定的 <span class="math inline">\(dag\)</span> 的拓扑序呢？</p><p>发现这个 <span class="math inline">\(dag\)</span> 只有两层，一层入度为 0，而这层入度为 0的就是那些 <span class="math inline">\(X\)</span> ，考虑合法情况 <span class="math inline">\(X\)</span> 最多有 8个。</p><p>不妨设 <span class="math inline">\(num\)</span> 为 <span class="math inline">\(X\)</span> 的个数，现在问题似乎变成了：把剩下的 <span class="math inline">\(nm-num\)</span> 个点（出度为0）<strong>合法地</strong>插入这 <span class="math inline">\(num\)</span> 数”前后左右“。</p><p>设剩下的点其中一个为 <span class="math inline">\(x\)</span>。</p><p><span class="math inline">\(x\)</span> 要是想插入，那么所有 <span class="math inline">\((u,v)\)</span> 的 <span class="math inline">\(u\)</span> 必须已经被插入。</p><p><span class="math inline">\(num\leq 8\)</span>,<span class="math inline">\(num\)</span> 很小，我们就状压 <span class="math inline">\(num\)</span> 。</p><p>设 <span class="math inline">\(f_{s,x}\)</span> 表示,当前那 <span class="math inline">\(num\)</span> 个数的状态为 <span class="math inline">\(s\)</span>，剩下有 <span class="math inline">\(x\)</span> 个自由的，出度为0的，可以插入的点。</p><p>注意以下 <span class="math inline">\(dp\)</span> 方程默认从 <span class="math inline">\(f_{s,x}\)</span> 转移出去。</p><p><span class="math display">\[\large f_{s,u}\leftarrow f_{s,u}+\binom{x}{u}(x-u)! f_{s,x} (u\leq x)\]</span></p><p><span class="math display">\[\large f_{s|point(j),x+add}\leftarrow f_{s|point(j),x+add}+f_{s,x}\ (point(j)\not \subset s)\]</span></p><p>第一个表示，从剩下 <span class="math inline">\(x\)</span> 个自由的点中选 <span class="math inline">\(x-u\)</span> 个，然后把这 <span class="math inline">\(x-u\)</span> 个全排列插入序列尾。</p><p>第二个表示，选一个没选过的 <span class="math inline">\(point(j)\)</span> ,然后能新选 <span class="math inline">\(add\)</span> 个自由点，这个 <span class="math inline">\(add\)</span> 可以转移时计算。</p><hr /><p><span class="math inline">\(dp\)</span> 想怎么写就可以怎么写了，根据你状压的写法。</p><p>剩下的就只有一个 <span class="math inline">\(dfs\)</span> 枚举选的 <span class="math inline">\(X\)</span> 的点，然后容斥算一下即可。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">int</span> n,m,vd;<br><span class="hljs-keyword">char</span> c[<span class="hljs-number">10</span>][<span class="hljs-number">10</span>];<br><span class="hljs-keyword">bool</span> vs[<span class="hljs-number">10</span>][<span class="hljs-number">10</span>];<br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span>&gt; &gt;r;<br><span class="hljs-keyword">int</span> v[<span class="hljs-number">6</span>][<span class="hljs-number">9</span>];<br><span class="hljs-keyword">int</span> dx[]=&#123;<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">-1</span>,<span class="hljs-number">-1</span>,<span class="hljs-number">-1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>&#125;;<br><span class="hljs-keyword">int</span> dy[]=&#123;<span class="hljs-number">-1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">-1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">-1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">paint</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y)</span></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;=<span class="hljs-number">8</span>;i++)&#123;<br>        <span class="hljs-keyword">if</span>(v[dx[i]+x][dy[i]+y]==<span class="hljs-number">0</span>&amp;&amp;c[dx[i]+x][dy[i]+y]) vd--;<br>        v[dx[i]+x][dy[i]+y]++;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">cls</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y)</span></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;=<span class="hljs-number">8</span>;i++)&#123;<br>        v[dx[i]+x][dy[i]+y]--;<br>        <span class="hljs-keyword">if</span>(v[dx[i]+x][dy[i]+y]==<span class="hljs-number">0</span>&amp;&amp;c[dx[i]+x][dy[i]+y]) vd++;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">int</span> num=<span class="hljs-number">0</span>;<br><span class="hljs-comment">////////////////////////////////////// dp begin</span><br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; b[<span class="hljs-number">20</span>];<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getnum</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> res=<span class="hljs-number">0</span>;<span class="hljs-keyword">while</span>(x)&#123;<br>        x-=(x)&amp;(-x);<br>        res++;<br>    &#125;<span class="hljs-keyword">return</span> res;<br>&#125;<br><span class="hljs-keyword">int</span> dp[<span class="hljs-number">260</span>][<span class="hljs-number">30</span>];<span class="hljs-keyword">int</span> p[<span class="hljs-number">6</span>][<span class="hljs-number">9</span>];<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> mod=<span class="hljs-number">12345678</span>;<span class="hljs-keyword">int</span> f[<span class="hljs-number">100</span>];<br><span class="hljs-keyword">int</span> comb[<span class="hljs-number">30</span>][<span class="hljs-number">30</span>];<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-built_in">memset</span>(dp,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span>(dp));<span class="hljs-built_in">memset</span>(p,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span>(p));<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;r.size();i++)&#123;<br>        <span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span>&gt; x=r[i];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k=<span class="hljs-number">0</span>;k&lt;<span class="hljs-number">8</span>;k++)&#123;<br>            p[x.first+dx[k]][x.second+dy[k]]|=(<span class="hljs-number">1</span>&lt;&lt;i);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">int</span> av=<span class="hljs-number">0</span>;<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++) <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">1</span>;j&lt;=m;j++) <span class="hljs-keyword">if</span>(v[i][j]==<span class="hljs-number">0</span>) av++;<br>    dp[<span class="hljs-number">0</span>][av]=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;=r.size();i++) b[i].clear();<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;=(<span class="hljs-number">1</span>&lt;&lt;r.size())<span class="hljs-number">-1</span>;i++)&#123;<br>        b[getnum(i)].push_back(i);<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;=r.size();i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> s:b[i])&#123;<span class="hljs-comment">//status</span><br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;=n*m-r.size();j++)&#123;<br>                <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k=<span class="hljs-number">0</span>;k&lt;j;k++)&#123;<br>                    dp[s][k]+=<span class="hljs-number">1ll</span>*dp[s][j]*f[j-k]%mod*comb[j][k]%mod;<br>                    dp[s][k]%=mod;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;r.size();j++)&#123;<span class="hljs-comment">//choose s | 1&lt;&lt;j</span><br>                <span class="hljs-keyword">if</span>(((<span class="hljs-number">1</span>&lt;&lt;j)&amp;s)==<span class="hljs-number">0</span>)&#123;<br>                    <span class="hljs-keyword">int</span> ts=(<span class="hljs-number">1</span>&lt;&lt;j)|s;<br>                    <span class="hljs-keyword">int</span> res=<span class="hljs-number">0</span>;<br>                    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k=<span class="hljs-number">0</span>;k&lt;<span class="hljs-number">8</span>;k++)&#123;<br>                        <span class="hljs-keyword">int</span> tx=r[j].first+dx[k],ty=r[j].second+dy[k];<br>                        <span class="hljs-keyword">if</span>((p[tx][ty]|ts)==ts&amp;&amp;c[tx][ty]) res++;<br>                    &#125;<br>                    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k=<span class="hljs-number">0</span>;k&lt;=n*m-r.size();k++)&#123;<br>                        dp[ts][k+res]+=dp[s][k];dp[ts][k+res]%=mod;<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> dp[(<span class="hljs-number">1</span>&lt;&lt;(r.size()))<span class="hljs-number">-1</span>][<span class="hljs-number">0</span>];<br>&#125;<br><span class="hljs-comment">//////////////////////////////////////////dp end</span><br><span class="hljs-keyword">int</span> ans=<span class="hljs-number">0</span>;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> X,<span class="hljs-keyword">int</span> nx,<span class="hljs-keyword">int</span> ny)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> res=solve();<br>    <span class="hljs-keyword">if</span>((r.size()-num)&amp;<span class="hljs-number">1</span>) ans-=res;<br>    <span class="hljs-keyword">else</span> ans+=res;ans%=mod;<br>    <span class="hljs-keyword">if</span>(vd==<span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">return</span> ;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=nx;i&lt;=nx;i++)<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=ny;j&lt;=m;j++)&#123;<br>        <span class="hljs-keyword">if</span>(v[i][j]) <span class="hljs-keyword">continue</span>;<br>        paint(i,j);<br>        r.push_back(<span class="hljs-built_in">make_pair</span>(i,j));<br>        dfs(X+<span class="hljs-number">1</span>,i,j);<br>        cls(i,j),r.pop_back();<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=nx+<span class="hljs-number">1</span>;i&lt;=n;i++)<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">1</span>;j&lt;=m;j++)&#123;<br>        <span class="hljs-keyword">if</span>(v[i][j]) <span class="hljs-keyword">continue</span>;<br>        paint(i,j);<br>        r.push_back(<span class="hljs-built_in">make_pair</span>(i,j));<br>        dfs(X+<span class="hljs-number">1</span>,i,j);cls(i,j);r.pop_back();<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-built_in">cin</span>&gt;&gt;n&gt;&gt;m;<br>    f[<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n*m;i++) f[i]=<span class="hljs-number">1ll</span>*f[i<span class="hljs-number">-1</span>]*i%mod;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;=n*m;i++) comb[i][<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n*m;i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">1</span>;j&lt;=i;j++)&#123;<br>            comb[i][j]=(comb[i<span class="hljs-number">-1</span>][j]+comb[i<span class="hljs-number">-1</span>][j<span class="hljs-number">-1</span>]);<br>            comb[i][j]%=mod;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++) <span class="hljs-built_in">cin</span>&gt;&gt;(c[i]+<span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">1</span>;j&lt;=m;j++)&#123;<br>            <span class="hljs-keyword">if</span>(c[i][j]==<span class="hljs-string">&#x27;X&#x27;</span>)&#123;<br>                paint(i,j);r.push_back(<span class="hljs-built_in">make_pair</span>(i,j)),num++;<br>            &#125;<br>        &#125;<br>    &#125;vd=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">1</span>;j&lt;=m;j++) <span class="hljs-keyword">if</span>(v[i][j]==<span class="hljs-number">0</span>) vd++;<br>    &#125;<br>    dfs(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>);<br>    <span class="hljs-built_in">cout</span>&lt;&lt;(ans+mod)%mod;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>可能是我写的比较渣，感觉还是大概能看明白的吧。</p>]]></content>
    
    
    <categories>
      
      <category>dp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>idea题</tag>
      
      <tag>dp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>noip2018 day1 t1</title>
    <link href="/2021/07/06/commemorate-that-fool/"/>
    <url>/2021/07/06/commemorate-that-fool/</url>
    
    <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/P5019">Link</a></p><div class="note note-primary">            <p>Old Memory</p>          </div><p>回首望去，他还是不忍直视当年那个抱着最美丽的幻想的，执意穿行金黄树林的小胖子。</p><p>他想骂他，在那个简单的时光中想着面子，幻想着不切实际的梦想这如今他都认为不简单的东西。</p><p>他想骂他，为什么不努力，为什么不脚踏实地。</p><p>但是他也是他，而他也将会成为他，老天用时间，信息不对等给他们两个开了一个玩笑。</p><p>他现在能做的只有继续吟啸，徐行，以此纪念这当年那个傻瓜，纪念他的梦想。</p><hr /><p>考场时，他在一个手就能数过来的我掌握的知识点中反复寻觅，同时根据学长讲的，但自己并未写过的知识点——分治，写了一个他认为很NB的分治。</p><p>当时的他只是过了样例，自己都不相信写的是正解。</p><p>在吉大外面的饭店中和同学徘徊，老师说过，要是学长们不努力，noip的分数就还是得在200左右徘徊，而他呢，这次似乎连一道题都不能确定AC。</p><p>老师来了，给他分享了t1的贪心，他当时脑子一震，当然，他还是对自己的分治抱有幻想。</p><p>而此刻，幻想彻底破灭，老师讲完，他没懂为什么分治不对，老师问懂没懂的时候也知识敷衍这点头。</p><p>day1,day2都结束了，发成绩了。</p><p>他只有 55 points 。25+0+0+0+30+0</p><p>有分的两题，分别是这道题，和填数游戏，他凭借着小学奥数瞎猜结论+手玩，以为能骗到50。。</p><p>此后他也放弃了这个题，他认为就算分治是个正确的算法，而自己一次也没有打过，甚至把学长教的二分当成分治，哈哈，算了吧。</p><p>此后的一年，两年这个想法一直没有挥散，结束了？noip2018结束了。</p><hr /><div class="note note-secondary">            <p>Present</p>          </div><p>2021.5.2</p><p>距离中考57days，他现在是初三。</p><p>"快快快，快tm给我测呀，别一直running on test 1，靠Wa on test 6了"。</p><p>又是一场4切的SB div2。</p><ul><li><p>“为什么题解长得都一样？”（有的是差不多）</p></li><li><p>“为什么题解的代码也都长一样？”</p></li><li><p>“妈的，原来是个转载的，转载有个屁用。”</p></li><li><p>“妈的，都是借鉴一个人的思路。”</p></li></ul><p>他才意识到，原来 "Wa on test 6" 是因为他少判断了一种情况，甚至他将这个特判的代码全部删掉也能对。</p><p>“这不就是个怪缝合题？”</p><p>他才想起来，这个似乎就是 noip day1 t1的一个增强版（缝合版）。</p><p>这道题题解给的是什么？我写的是什么？是tm的分治！！！！！！！！！！！！！！</p><p>这两年，他变了很多，他会了很多，也不甘于只听别人的解法。</p><p>他重新想了以下，发现 noip day1 t1 也是可以类似做的。</p><p>他考场上写的是正解。</p><p>他应该早早就有能力发现这点。</p><p>他应该早早的想一想，改一改题，而不是听别人分享他们自己的贪心，人类智慧。</p><p>他不应该只有55 points 。</p><hr /><div class="note note-success">            <p>Solution</p>          </div><p>这个题可以分治。</p><p>我们发现这个区间越长，就一定比短的优。</p><p>就最初的那段区间来说，我们最多有 <span class="math inline">\(Min_{i=1}^{r}d_i\)</span> 次覆盖整个区间的方法。</p><p>接下来会产生一个 0，而如果把 0 当作分割符，我们的区间被分成两个区间。</p><p>而不管我们减了多少，这个一段区间内的大小关系是不会变的，我们只需要找出每个区间原先的 <span class="math inline">\(Min(d)\)</span> 即可。</p><p>这个直接 <span class="math inline">\(st\)</span> 表做 。</p><p>考虑复杂度，我们每找一次 <span class="math inline">\(Min(d)\)</span> 我们就会删除一个数（变为0)，我们顶多会删除 <span class="math inline">\(n\)</span> 次。</p><p>所以复杂度为 <span class="math inline">\(\mathcal O(n\times findmin)\)</span> ，由于是 <span class="math inline">\(st\)</span> 表，<span class="math inline">\(\mathcal O(n\log n+n)\)</span>。</p><hr /><p>我现在其实特别想找出那个 <code>JL-Senior.zip</code>（也不知道是不是这个名字，反正CSP是这个名字）存着选手代码的<code>zip</code> 。</p><p>我想找出自己当年怎么写的，看能不能帮自己改一改代码，</p><p>有点懊悔自己当时得过且过，有点惋惜自己没好好学习，但这都是苍白的，因为时间已经流逝。</p><p>既然选择这般独木桥，这条人迹罕至的小路，就不能懊悔年少的无知，年少的轻狂。</p><p>做下去永远比说下去难得多。</p><p>以此，纪念那个13岁的傻瓜。</p>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>分治</tag>
      
      <tag>回忆</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>cf1519E</title>
    <link href="/2021/07/06/cf1452E/"/>
    <url>/2021/07/06/cf1452E/</url>
    
    <content type="html"><![CDATA[<h3 id="题意">题意</h3><p><a href="https://codeforces.com/contest/1452/problem/E">Link</a></p><h3 id="题解">题解</h3><h4 id="hint1">hint1</h4><p>如果只有一个老师的话，很好算。</p><h4 id="hint2">hint2</h4><p>我们可以通过算每一个学生的贡献，算出总体答案。</p><h4 id="sol">sol</h4><p>枚举第一个老师的左端点。</p><p>算每一个同学对第二个老师放的位置的贡献。</p><p><img src="\img\1.png" /></p><p>很容易发现这个贡献是两段等差数列，那么我们可以差分两次维护。</p><h3 id="复杂度">复杂度</h3><p><span class="math inline">\(\mathcal{O(nm)}\)</span></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">int</span> n,m,k;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N=<span class="hljs-number">2000</span>+<span class="hljs-number">100</span>;<br><span class="hljs-keyword">int</span> l[N],r[N];<br><span class="hljs-keyword">int</span> sum[N],ans=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">int</span> f[N],cf[N];<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">modify</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y,<span class="hljs-keyword">int</span> v)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(x&gt;y) <span class="hljs-keyword">return</span> ;<br>    cf[x]+=v,cf[y+<span class="hljs-number">1</span>]-=v;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    ios::sync_with_stdio(<span class="hljs-literal">false</span>);<br>    <span class="hljs-built_in">cin</span>&gt;&gt;n&gt;&gt;m&gt;&gt;k;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=m;i++)&#123;<br>        <span class="hljs-built_in">cin</span>&gt;&gt;l[i]&gt;&gt;r[i];<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n-k+<span class="hljs-number">1</span>;i++)&#123;<br>        <span class="hljs-built_in">memset</span>(sum,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span>(sum));<br>        <span class="hljs-built_in">memset</span>(f,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span>(f));<br>        <span class="hljs-built_in">memset</span>(cf,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span>(cf));<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=i;j&lt;=i+k<span class="hljs-number">-1</span>;j++) sum[j]=sum[j<span class="hljs-number">-1</span>]+<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=i+k;j&lt;=n;j++) sum[j]=sum[j<span class="hljs-number">-1</span>];<br>        <span class="hljs-keyword">int</span> res=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">1</span>;j&lt;=m;j++) res+=sum[r[j]]-sum[l[j]<span class="hljs-number">-1</span>];<br>        <span class="hljs-keyword">int</span> x=i,y=i+k<span class="hljs-number">-1</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">1</span>;j&lt;=m;j++)&#123;<br>            <span class="hljs-keyword">if</span>(y&lt;l[j]) &#123;<br>                modify(l[j]-k+<span class="hljs-number">1</span>,min(l[j],r[j]-k+<span class="hljs-number">1</span>),<span class="hljs-number">1</span>);<br>                modify(max(l[j],r[j]-k+<span class="hljs-number">1</span>)+<span class="hljs-number">1</span>,r[j]+<span class="hljs-number">1</span>,<span class="hljs-number">-1</span>);<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(l[j]&lt;=y&amp;&amp;r[j]&gt;y)&#123;<br>                modify(x+<span class="hljs-number">1</span>,min(l[j],r[j]-k+<span class="hljs-number">1</span>),<span class="hljs-number">1</span>);<br>                modify(max(l[j],r[j]-k+<span class="hljs-number">1</span>)+<span class="hljs-number">1</span>,r[j]-(y-l[j]),<span class="hljs-number">-1</span>);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">int</span> tmp=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">1</span>;j&lt;=n;j++)&#123;<br>            cf[j]+=cf[j<span class="hljs-number">-1</span>];<br>            tmp+=cf[j];<br>            ans=max(ans,res+tmp);<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">cout</span>&lt;&lt;ans;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>差分</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>cf1515F &amp; cf1515G</title>
    <link href="/2021/07/06/cf1515F/"/>
    <url>/2021/07/06/cf1515F/</url>
    
    <content type="html"><![CDATA[<h2 id="cf-1515f">cf 1515F</h2><h3 id="题意">题意</h3><p><a href="https://codeforces.com/contest/1515/problem/F">Link</a></p><h3 id="题解">题解</h3><p>考场时候没时间想了，毕竟D 耽误了我 1h+ 只是因为 <code>while</code> 打成了 <code>if</code> 。。。</p><p>首先这个题比较神奇的地方应该是他除了 <span class="math inline">\(\sum a_i&lt;(n-1)x\)</span> 其余情况都有解。</p><p>我胡一个证明吧。</p><p>也就是证明 <span class="math inline">\(sum \ge (n-1)x\)</span> 必然有解。</p><ul><li><p>归纳法，n=1时候显然成立，下面就是证明 <span class="math inline">\(n=t\)</span> 可以转移到 <span class="math inline">\(n=t-1\)</span> 的状态。</p></li><li><p>首先如果存在 <span class="math inline">\(a_i\ge x\)</span>,那么 <span class="math inline">\(i\)</span> 随便连都满足。</p></li><li><p>否则 <span class="math inline">\(\forall a_i&lt; x\)</span>,如果不存在 <span class="math inline">\(a_i+a_j\ge x\)</span>，那么<span class="math inline">\(\sum_{i=1}^{n-2}a_i&lt;(n-2)x,a_n+a_{n-1}&lt;x\)</span></p><p>所以 <span class="math inline">\(\sum_{i=1}^{n}a_i&lt;(n-1)x\)</span> 矛盾，所以一定存在 <span class="math inline">\(a_i+a_j\ge x\)</span>。</p></li></ul><hr /><p>注意这样的一点，设 <span class="math inline">\(a_{max}\)</span> 为最大的 <span class="math inline">\(a_i\)</span>。</p><p>如果 <span class="math inline">\(a_{max}+a_i&lt;x\)</span>，那么不管别的怎么组合，想要救这个 <span class="math inline">\(a_i\)</span> 都不可能了。</p><p>因为 <span class="math inline">\(a_{max}&lt;x\)</span>,每一个 <span class="math inline">\(a_i&lt;x\)</span> ,合并对于每一个 <span class="math inline">\(a_i\)</span> 都是劣的。</p><p>再根据上面那个结论，所以要是有解，我 <span class="math inline">\(a_{max}\)</span> 想和谁合并都可以合并。</p><hr /><p>这样我们有了一个做法，维护 <span class="math inline">\(a_{max}\)</span> 以及每一个<span class="math inline">\(i\)</span> 能到达的所有点集 。</p><p>每次找出 <span class="math inline">\(a_{max}\)</span> 并且在他属于的那个点集中，随机找一个不在他这个连通块中的。启发式合并。</p><div class="note note-info">            <p>Tips:</p><p>注意 vector 的 clear 不能释放内存！！而deque的pop_back似乎能释放内存。</p><p>一定要启发式合并，不要瞎 yy，以为是均摊的。</p><p>能到达的点集肯定是有不合法的（已经联通的），注意处理这个地方的逻辑，一定不要图省事。</p>          </div><h3 id="参考代码">参考代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">int</span> n,m,x,w;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N=<span class="hljs-number">3e5</span>+<span class="hljs-number">100</span>;<br><span class="hljs-keyword">int</span> fa[N];<br><span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> val[N];<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">gt</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(x==fa[x]) <span class="hljs-keyword">return</span> x;<br>    <span class="hljs-keyword">return</span> fa[x]=gt(fa[x]);<br>&#125;<span class="hljs-comment">// 并查集</span><br><span class="hljs-keyword">int</span> a[N];<br><span class="hljs-built_in">priority_queue</span>&lt;<span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span>,<span class="hljs-keyword">int</span>&gt; &gt;q;<br><span class="hljs-built_in">deque</span>&lt;<span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span>&gt; &gt;v[N];<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">merge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y)</span></span>&#123;<br>    val[x]=val[x]+val[y]-w;<br>    <span class="hljs-keyword">if</span>(v[x].size()&lt;v[y].size()) swap(v[x],v[y]);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> d:v[y])  v[x].push_back(d);<br>    <span class="hljs-keyword">while</span>(!v[y].empty()) v[y].pop_back();<br>    fa[y]=x;<br>&#125;<span class="hljs-comment">//启发式合并 deque</span><br><span class="hljs-function"><span class="hljs-keyword">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    ios::sync_with_stdio(<span class="hljs-literal">false</span>);<br>    <span class="hljs-built_in">cin</span>&gt;&gt;n&gt;&gt;m&gt;&gt;x;w=x;<br>    <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> sum=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++) <span class="hljs-built_in">cin</span>&gt;&gt;a[i],sum+=<span class="hljs-number">1ll</span>*a[i];<br>    <span class="hljs-keyword">if</span>(sum&lt;<span class="hljs-number">1ll</span>*(n<span class="hljs-number">-1</span>)*x) <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot;NO\n&quot;</span>,<span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>    <span class="hljs-comment">// 判断无解</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++) fa[i]=i,val[i]=a[i];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=m;i++)&#123;<br>        <span class="hljs-keyword">int</span> x,y;<br>        <span class="hljs-built_in">cin</span>&gt;&gt;x&gt;&gt;y;<br>        v[x].push_back(<span class="hljs-built_in">make_pair</span>(y,i));<br>        v[y].push_back(<span class="hljs-built_in">make_pair</span>(x,i));<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        q.push(<span class="hljs-built_in">make_pair</span>(val[i],i));<br>    &#125;<br>    <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot;YES\n&quot;</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> ii=<span class="hljs-number">1</span>;ii&lt;n;ii++)&#123;<br>        <span class="hljs-keyword">int</span> i=q.top().second,id=gt(i);q.pop();<br>        <span class="hljs-comment">// 取出最大值，当然我们只在并查集根节点出统计即可。</span><br>        <span class="hljs-keyword">if</span>(i!=id) &#123;ii--;<span class="hljs-keyword">continue</span>;&#125;<br>        <span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span>&gt; y=v[id].back();<br>        v[id].pop_back();<br>        <span class="hljs-keyword">if</span>(id==gt(y.first))&#123;<span class="hljs-comment">// 处理不合法。</span><br>            <span class="hljs-keyword">while</span>(gt(v[id].back().first)==id) v[id].pop_back();<br>            y=v[id].back();<br>            v[id].pop_back();<br>        &#125;<br>        <span class="hljs-built_in">cout</span>&lt;&lt;y.second&lt;&lt;<span class="hljs-built_in">endl</span>;<br>        merge(gt(i),gt(y.first));<br>        q.push(<span class="hljs-built_in">make_pair</span>(val[gt(i)],gt(i)));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr /><hr /><hr /><h2 id="cf-1515g">cf 1515G</h2><h3 id="题意-1">题意</h3><p><a href="https://codeforces.com/problemset/problem/1515/G">Link</a></p><h3 id="题解-1">题解</h3><p>首先注意，我们不管咋走最后都要回到这个点。</p><p>所以我们走的一定是一个回路，可以是不简单回路。</p><p>所以以下讨论都在一个 scc 中讨论。(毕竟一个环必然是一个 scc，同时如果这个点不在scc中，他只可能权值为0)。</p><h4 id="lemma-1">Lemma 1</h4><p>不管 <span class="math inline">\(\bmod\)</span> 什么，如果从 <span class="math inline">\(A\rightarrow B\)</span> 有一条权值和为 <span class="math inline">\(x\)</span> 的路径，一定存在一条从 <span class="math inline">\(B\rightarrow A\)</span> 权值为 <span class="math inline">\(-x\)</span> 的路径。</p><p>由于是scc，设 <span class="math inline">\(B\rightarrow A\)</span> 之间有一条权值为 <span class="math inline">\(y\)</span> 的路径。（<span class="math inline">\(y\)</span> 具体是什么并不重要）</p><p>假设当前 <span class="math inline">\(\bmod m\)</span>，我们从 <span class="math inline">\(B\)</span> 开始，在 <span class="math inline">\(A,B\)</span> 之间往复走 <span class="math inline">\(m-1\)</span> 次，最后一次到 <span class="math inline">\(A\)</span>。</p><p>此时权值和为 <span class="math inline">\((m-1)(x+y)+y \equiv (m-1)x\equiv -x\bmod m\)</span>。</p><p>qed</p><hr /><p>所以我们现在可以神不知鬼不觉地从 <span class="math inline">\(A\)</span> 跑到任意一个 <span class="math inline">\(B\)</span> ，然后在 <span class="math inline">\(B\)</span> 那里随便走几个圈，然后神不知鬼不觉地回来。</p><p>（因为 <span class="math inline">\(A\rightarrow B\)</span> 权值为 <span class="math inline">\(x\)</span>,存在 <span class="math inline">\(B\rightarrow A\)</span> 权值为 <span class="math inline">\(-x\)</span>，这么一来一回相当于，中间的具体从 <span class="math inline">\(A\)</span> 到 <span class="math inline">\(B\)</span> 怎么走的不用管了。</p><p>那么我们现在能走出的圈的权值，只可能是所有简单圈的权值，通过线性运算得出的权值。</p><p>由于裴蜀定理，现在能表示出的圈的权值，都是 <span class="math inline">\(\gcd(l_1,l_2,\cdots,l_k)\)</span> 的倍数。<span class="math inline">\(l_i\)</span> 表示简单环的长度。</p><p>怎么找到所有简单环也是个问题。</p><p>建出dfs 树后，一条非树边连接的 <span class="math inline">\((u,v,w)\)</span> 产生了一个权值为 <span class="math inline">\(dep_u+w-dep_v\)</span> 的环。</p><p>这还不够，因为还存在两条非树边产生的环。但冷静思考一下，这个环的长度可以用两个非树边连接的环长度和表示。</p><p><img src="/img/2.png" /></p><p>如图所示，红色可以由蓝色，绿色相加而得，注意边的正反。</p><p>由于我们一直强调的线性表示，所以在 <span class="math inline">\(\gcd\)</span> 的角度下，蓝色和绿色在一起等价于红色。</p><p>我们只要算有一条非树边产生的环的 <span class="math inline">\(\gcd\)</span> 即可。</p><p><span class="math inline">\(Code\)</span></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> int long long</span><br><span class="hljs-keyword">int</span> n,m;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N=<span class="hljs-number">2e5</span>+<span class="hljs-number">1000</span>;<br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span>&gt; &gt; v[N],e[N];<br><span class="hljs-keyword">int</span> cnt,col[N],dfn[N],low[N],c;<br><span class="hljs-built_in">stack</span>&lt;<span class="hljs-keyword">int</span>&gt;s;<span class="hljs-keyword">bool</span> vis[N];<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">tarjan</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span>&#123;<br>    dfn[x]=low[x]=++cnt;<br>    s.push(x);vis[x]=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;v[x].size();i++)&#123;<br>        <span class="hljs-keyword">int</span> y=v[x][i].first;<br>        <span class="hljs-keyword">if</span>(dfn[y]==<span class="hljs-number">0</span>)&#123;<br>            tarjan(y);low[x]=min(low[x],low[y]);<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(vis[y]) low[x]=min(low[x],dfn[y]);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(low[x]==dfn[x])&#123;<br>        <span class="hljs-keyword">int</span> y=<span class="hljs-number">-1</span>;c++;<br>        <span class="hljs-keyword">while</span>(y!=x)&#123;<br>            y=s.top();s.pop();<br>            col[y]=c;vis[y]=<span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-comment">// 以上为tarjan</span><br><span class="hljs-keyword">int</span> dep[N];<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">gcd</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a,<span class="hljs-keyword">int</span> b)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(b==<span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> a;<br>    <span class="hljs-keyword">return</span> gcd(b,a%b);<br>&#125;<br><span class="hljs-keyword">int</span> g[N];<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">work</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span>&#123;<br>    vis[x]=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;e[x].size();i++)&#123;<br>        <span class="hljs-keyword">int</span> y=e[x][i].first;<br>        <span class="hljs-keyword">if</span>(vis[y])&#123;<br>            g[col[x]]=gcd(g[col[x]],dep[x]+e[x][i].second-dep[y]);<br>        &#125;   <br>        <span class="hljs-keyword">else</span> &#123;<br>            dep[y]=dep[x]+e[x][i].second;<br>            work(y);<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">int</span> q,a,b,u;<br><span class="hljs-function"><span class="hljs-keyword">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    ios::sync_with_stdio(<span class="hljs-literal">false</span>);<br>    <span class="hljs-built_in">cin</span>&gt;&gt;n&gt;&gt;m;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=m;i++)&#123;<br>        <span class="hljs-keyword">int</span> x,y,w;<br>        <span class="hljs-built_in">cin</span>&gt;&gt;x&gt;&gt;y&gt;&gt;w;<br>        v[x].push_back(<span class="hljs-built_in">make_pair</span>(y,w));<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++) <span class="hljs-keyword">if</span>(!dfn[i]) tarjan(i);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;v[i].size();j++)&#123;<br>            <span class="hljs-keyword">int</span> k=v[i][j].first;<br>            <span class="hljs-keyword">if</span>(col[i]==col[k]) e[i].push_back(v[i][j]);<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">// 以上为tarjan</span><br>    <span class="hljs-built_in">memset</span>(vis,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span>(vis));<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<span class="hljs-keyword">if</span>(vis[i]==<span class="hljs-number">0</span>) work(i);<br>    <span class="hljs-built_in">cin</span>&gt;&gt;q;<br>    <span class="hljs-keyword">while</span>(q--)&#123;<br>        <span class="hljs-built_in">cin</span>&gt;&gt;u&gt;&gt;a&gt;&gt;b;<br>        <span class="hljs-keyword">if</span>(a==<span class="hljs-number">0</span>) <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot;YES\n&quot;</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(g[col[u]]==<span class="hljs-number">0</span>) <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot;NO\n&quot;</span>;<br>        <span class="hljs-keyword">else</span>&#123;<br>            a=b-a;<br>            <span class="hljs-keyword">if</span>(a%gcd(g[col[u]],b)!=<span class="hljs-number">0</span>) <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot;NO\n&quot;</span>;<br>            <span class="hljs-keyword">else</span> <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot;YES\n&quot;</span>;<br>        &#125;       <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>图论</category>
      
    </categories>
    
    
    <tags>
      
      <tag>dsu</tag>
      
      <tag>加边加边并查集</tag>
      
      <tag>小idea</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>cf1519E</title>
    <link href="/2021/07/06/cf1519E/"/>
    <url>/2021/07/06/cf1519E/</url>
    
    <content type="html"><![CDATA[<h3 id="题意">题意</h3><p><a href="https://codeforces.com/contest/1519/problem/E">Link</a></p><p>给你 <span class="math inline">\(n\)</span> 个点,<span class="math inline">\(1\leq x,y\leq10^9\)</span> 。</p><p>记 <span class="math inline">\((x&#39;,y&#39;)\)</span> 表示为 <span class="math inline">\((x+1,y)\)</span> 或者 <span class="math inline">\((x,y+1)\)</span></p><p>定义一对点合法 <span class="math inline">\((x_1,y_1),(x_2,y_2)\)</span> 当且仅当存在 <span class="math inline">\((x_1&#39;,y_1&#39;),(x_2&#39;,y_2&#39;)\)</span> 使得<span class="math inline">\((x_1&#39;,y_1&#39;),(x_2&#39;,y_2&#39;),(0,0)\)</span> 共线。</p><p>问最多能选出多少对点，注意：一个点最多只能被选择一次。</p><h3 id="题解">题解</h3><p>很显然如果 <span class="math inline">\((x_1,y_1),(x_2,y_2)\)</span> 与 <span class="math inline">\((0,0)\)</span> 贡献，当且仅当这两个点斜率相同，即 <span class="math inline">\(\frac{y_1}{x_1}=\frac{y_2}{x_2}\)</span>。</p><p>而这个 <span class="math inline">\(\frac{x_1}{y_1}\)</span> 相当于 这个点的属性值。</p><p>那么问题转换为给你 <span class="math inline">\(n\)</span> 个点，每个点有两种可能的属性值。</p><p>让你每次选出两个存在相同属性的点，问最多选多少个。</p><hr /><p>我最初的想法是想把 这个平面上的 <span class="math inline">\((x,y)\)</span> 看成点，而选择一对 <span class="math inline">\((x,y)\)</span> 看成一个类似匹配的东西。</p><p>但是 1.5h 我也没什么有价值的idea。（如果能类似这么做还请大佬不吝赐教）</p><hr /><p>正解是这样的，我们把 斜率看成点，而把这个 <span class="math inline">\((x,y)\)</span> 看成连接两个可能的斜率的边。</p><p>我们发现，两个移动后可能共线的 <span class="math inline">\((x,y)\)</span> 必定是图中连接3个点的两条边，也就是至少有一个公共点的两条边。</p><p>现在做法应该比较明晰了。</p><p>注意我们的匹配不是针对点的，而是针对边的。</p><p>具体做法是建出 <span class="math inline">\(dfs\)</span> 树，我们把结点连向儿子的边匹配，如果剩下一条边的话 即 <span class="math inline">\(sz_x\bmod 2=1\)</span>。我们就将剩下这条与 <span class="math inline">\((x\rightarrow son_x)\)</span> 这条边匹配，并且在 <span class="math inline">\(fa_x\)</span> 的匹配时不计算这条边。</p><p>容易发现这样匹配一定是最优的。</p><p><span class="math inline">\(why?\)</span> 考虑如果没有全部匹配，一定是只剩下 <span class="math inline">\(root\rightarrow son_r\)</span> 这一条边。那么发现总边数也一定是奇数，不存在全部匹配的情况。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">int</span> n;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> int long long</span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N=<span class="hljs-number">2e5</span>+<span class="hljs-number">10000</span>;<br><span class="hljs-keyword">int</span> a[N],b[N],c[N],d[N];<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">frac</span>&#123;</span><span class="hljs-keyword">int</span> a,b;&#125;;<br><span class="hljs-keyword">inline</span> <span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span> &lt; (frac a,frac b)&#123;<br>    <span class="hljs-keyword">if</span>(a.a==b.a) <span class="hljs-keyword">return</span> a.b&lt;b.b;<br>    <span class="hljs-keyword">return</span> a.a&lt;b.a;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">gcd</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a,<span class="hljs-keyword">int</span> b)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(b==<span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> a;<br>    <span class="hljs-keyword">return</span> gcd(b,a%b);<br>&#125;<br><span class="hljs-keyword">inline</span> frac <span class="hljs-keyword">operator</span> / (frac a,frac b)&#123;<br>    frac c;<br>    c.a=a.a*b.b;<br>    c.b=a.b*b.a;<br>    <span class="hljs-keyword">int</span> g=gcd(c.a,c.b);<br>    c.a/=g,c.b/=g;<br>    <span class="hljs-keyword">return</span> c;<br>&#125;<br><br><span class="hljs-built_in">map</span>&lt;frac,<span class="hljs-keyword">int</span>&gt; mp;<br><br>frac x,y,f[N][<span class="hljs-number">5</span>];<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span>&#123;</span><span class="hljs-keyword">int</span> x,v;&#125;;<br><span class="hljs-keyword">inline</span> <span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span> &lt;(node a,node b)&#123;<br>    <span class="hljs-keyword">if</span>(a.v==b.v) <span class="hljs-keyword">return</span> a.x&lt;b.x;<br>    <span class="hljs-keyword">return</span> a.v&lt;b.v;<br>&#125;<br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span>&gt; &gt; ans,v[N&lt;&lt;<span class="hljs-number">2</span>];<br><span class="hljs-keyword">int</span> tot;<span class="hljs-keyword">bool</span> vis[N&lt;&lt;<span class="hljs-number">2</span>];<br><span class="hljs-keyword">int</span> dep[N&lt;&lt;<span class="hljs-number">2</span>];<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> fa,<span class="hljs-keyword">int</span> faid)</span></span><br><span class="hljs-function"></span>&#123;<br>    dep[x]=dep[fa]+<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;v[x].size();i++)&#123;<br>        <span class="hljs-keyword">int</span> y=v[x][i].first,w=v[x][i].second;<br>        <span class="hljs-keyword">if</span>(dep[y]==<span class="hljs-number">0</span>) dfs(y,x,w);<br>    &#125;<br>    <span class="hljs-keyword">int</span> pre=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;v[x].size();i++)&#123;<br>        <span class="hljs-keyword">int</span> y=v[x][i].first,w=v[x][i].second;<br>        <span class="hljs-keyword">if</span>(dep[y]&gt;dep[x])&#123;<br>            <span class="hljs-keyword">if</span>(vis[w]) <span class="hljs-keyword">continue</span>;<br>            <span class="hljs-keyword">if</span>(pre==<span class="hljs-number">0</span>) pre=w;<br>            <span class="hljs-keyword">else</span>&#123;<br>                vis[pre]=vis[w]=<span class="hljs-number">1</span>;<br>                ans.push_back(<span class="hljs-built_in">make_pair</span>(pre,w));<br>                pre=<span class="hljs-number">0</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(pre&amp;&amp;faid)&#123;<br>        vis[pre]=vis[faid]=<span class="hljs-number">1</span>;<br>        ans.push_back(<span class="hljs-built_in">make_pair</span>(pre,faid));<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    ios::sync_with_stdio(<span class="hljs-literal">false</span>);<br>    <span class="hljs-built_in">cin</span>&gt;&gt;n;<br>    <span class="hljs-keyword">int</span> id=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        <span class="hljs-built_in">cin</span>&gt;&gt;a[i]&gt;&gt;b[i]&gt;&gt;c[i]&gt;&gt;d[i];<br>        x=frac&#123;a[i]+b[i],b[i]&#125;;<br>        y=frac&#123;c[i],d[i]&#125;;<br>        f[i][<span class="hljs-number">1</span>]=x/y;<br>        x=frac&#123;a[i],b[i]&#125;;<br>        y=frac&#123;c[i]+d[i],d[i]&#125;;<br>        f[i][<span class="hljs-number">2</span>]=x/y;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k=<span class="hljs-number">1</span>;k&lt;=<span class="hljs-number">2</span>;++k)&#123;<br>            <span class="hljs-keyword">if</span>(mp[f[i][k]]==<span class="hljs-number">0</span>) &#123;tot++,mp[f[i][k]]=tot;<span class="hljs-keyword">continue</span>;&#125;<br>        &#125;<br>        v[mp[f[i][<span class="hljs-number">1</span>]]].push_back(<span class="hljs-built_in">make_pair</span>(mp[f[i][<span class="hljs-number">2</span>]],i));<br>        v[mp[f[i][<span class="hljs-number">2</span>]]].push_back(<span class="hljs-built_in">make_pair</span>(mp[f[i][<span class="hljs-number">1</span>]],i));<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=tot;i++) <span class="hljs-keyword">if</span>(dep[i]==<span class="hljs-number">0</span>) dfs(i,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">cout</span>&lt;&lt;ans.size()&lt;&lt;<span class="hljs-built_in">endl</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> x:ans)&#123;<br>        <span class="hljs-built_in">cout</span>&lt;&lt;x.first&lt;&lt;<span class="hljs-string">&quot; &quot;</span>&lt;&lt;x.second&lt;&lt;<span class="hljs-built_in">endl</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>图论</category>
      
    </categories>
    
    
    <tags>
      
      <tag>小idea</tag>
      
      <tag>dfs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基本多项式</title>
    <link href="/2021/07/06/basic-poly/"/>
    <url>/2021/07/06/basic-poly/</url>
    
    <content type="html"><![CDATA[<p>本文简单介绍一下基本多项式理论。</p><p>持续更新中。</p><span id="more"></span><p>因为是简单介绍，只说明做法，不给予严格证明，以及前人是如何想出的这个方法。</p><h3 id="多项式乘法">多项式乘法</h3><h4 id="多项式乘法与和卷积">多项式乘法与和卷积</h4><p><span class="math inline">\(A=\sum\limits_{i=0}^{n}a_ix^i,B=\sum\limits_{i=0}^{n}b_ix^i\)</span>。</p><p>显然有 <span class="math inline">\(A\times B=\sum\limits_{i=0}^n\sum\limits_{j=0}^na_ib_jx^{i+j}=\sum\limits_{d=0}^n\sum\limits_{i+j=d}^na_ib_jx^d\)</span>。</p><p><span class="math inline">\(C=A\times B,C(d)=\sum\limits_{i+j=d}^na_ib_jx^d\)</span>。</p><p>这玩意就是和卷积，可见和卷积与多项式乘法有着千丝万缕的关系。</p><h4 id="快速傅里叶变换">快速傅里叶变换</h4><p>众所周知，一个 <span class="math inline">\(n-1\)</span> 次多项式（函数）可以用 <span class="math inline">\(n\)</span> 个不同的点唯一确定出来。</p><p>而如果考虑两个多项式 <span class="math inline">\(f,g\)</span>，当<span class="math inline">\(x=x_0\)</span> 时，<span class="math inline">\(f\times g\ (x_0)=f(x_0)\times g(x_0)\)</span> 。</p><p>这个很好理解。</p><p>所以点值表达乘积就是直接将相同横坐标的 <span class="math inline">\(y\)</span> 乘。</p><p>那么如何将多项式 <span class="math inline">\(f\)</span> 转成点值。</p><p>代入复数，用 <span class="math inline">\(n\)</span> 次单位根做 <span class="math inline">\(x\)</span>。</p><p>即 <span class="math inline">\(x^n=1\)</span> 的 <span class="math inline">\(n\)</span> 个复数解，记录以 <span class="math inline">\(x\)</span> 轴正方向，逆时针第一个复根为 <span class="math inline">\(w\)</span>，所有单位根就是 <span class="math inline">\(w^0,w^1,\cdots,w^{n-1}\)</span>。</p><p>目标：求 <span class="math inline">\(\forall \ i,F(k)=\sum\limits_{j=0}^{n-1}a_j(w^i)^j\)</span>。</p><p>我们将次方奇数偶数分开考虑 <span class="math inline">\(F(k)=\sum\limits_{j=0}^{n}a_j(w^k)^j=\sum\limits_{j=0}^{n/2-1}a_{2j}(w^k)^{2j}+w^k\sum\limits_{j=0}^{n/2-1}a_{2j+1}(w^k)^{2j}\)</span>。</p><p><span class="math inline">\(F(k)=\sum\limits_{j=0}^{n}a_j(w^k)^j=\sum\limits_{j=0}^{n/2-1}a_{2j}(w^{2k})^{j}+w^k\sum\limits_{j=0}^{n/2-1}a_{2j+1}(w^{2k})^{j}\)</span>。</p><p>由于 <span class="math inline">\((w^k)^2=(w^{k+n/2})^2\)</span> （<span class="math inline">\(w^n=1\)</span>)。</p><p>所以 <span class="math inline">\(F(k)\)</span> 与 <span class="math inline">\(F(k+n/2)\)</span> 只差一点点，就是 <span class="math inline">\(w^k\)</span> 项的正负号 （<span class="math inline">\(w^k=-w^{k+n/2}\)</span>）。</p><p>原本你要求 <span class="math inline">\(F(w^0),F(w^1),\cdots F(w^{n-1})\)</span>,现在只要求 <span class="math inline">\(F(w^0),F(w^1),\cdots F(w^{n/2-1})\)</span>。</p><p>范围直接缩小一倍。那么对于接下来的 <span class="math inline">\(F_0(w^{2k}),F_1(w^{2k})\)</span>（系数是奇数(1)还是偶数(0)）也可以递归下求。</p><p>递归效率缓慢，能够优化。</p><p>发现本质上每次将 <span class="math inline">\(k\)</span>,缩小一半的操作其实是想要最后把 <span class="math inline">\(w^0\)</span> 算出，然后计算出别的。</p><p>可以如图按照一定顺序把 <span class="math inline">\(a_i\times (w^0)^i\)</span> 按顺序排开，然后合并。</p><p>大概。。。</p><p>这个顺序<strong>通过观察</strong> 发现是二进制反过来 ，所以能快速求出。</p><p>代码解读一下。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">const</span> pie=<span class="hljs-built_in">acos</span>(<span class="hljs-number">-1</span>);<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">fft</span><span class="hljs-params">(<span class="hljs-built_in">complex</span> *a)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;lim;i++) <span class="hljs-keyword">if</span>(i&lt;rev[i]) swap(a[i],a[rev[i]]);<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> mid=<span class="hljs-number">1</span>;mid&lt;lim;mid=mid&lt;&lt;<span class="hljs-number">1</span>)<span class="hljs-comment">//从下向上合并，mid 代表合并之前每块的长度</span><br>&#123;<br><span class="hljs-function"><span class="hljs-built_in">complex</span> <span class="hljs-title">wn</span><span class="hljs-params">(<span class="hljs-built_in">cos</span>(p/mid),<span class="hljs-built_in">sin</span>(p/mid))</span></span>;<span class="hljs-comment">// 合并后那个的w^k,模长都是1，用角度表示。</span><br>                                          <span class="hljs-comment">// 比如说 mid=lim/2 时,wn这个的角度就是 pie/(lim/2)=(2*pie)/lim</span><br>          <span class="hljs-comment">// 就是最初的单位根。</span><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> r=mid&lt;&lt;<span class="hljs-number">1</span>,j=<span class="hljs-number">0</span>;j&lt;lim;j+=r)<span class="hljs-comment">//跳块，r就是合并后块长</span><br>&#123;<br><span class="hljs-function"><span class="hljs-built_in">complex</span> <span class="hljs-title">w</span><span class="hljs-params">(<span class="hljs-number">1.0</span>,<span class="hljs-number">0.0</span>)</span></span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k=<span class="hljs-number">0</span>;k&lt;mid;k++,w=w*wn) <span class="hljs-comment">//w 就是你乘的 w^k (因为你更新得更新 w^0,w^k,w^2k,... 处的点值)</span><br>&#123;<br><span class="hljs-built_in">complex</span> x=a[k+j],y=w*a[k+j+mid];<br>a[k+j]=x+y;<br>a[k+j+mid]=x-y;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>一般人不用点值表达，所以必须要有逆傅里叶变换。</p><p><strong>不难发现</strong> 由于范德蒙德矩阵在 <span class="math inline">\(A_{i,j}=w^{ij}\)</span> 有着巨NB的性质，<span class="math inline">\(A^{-1}_{i,j}=w^{-ij}\)</span>。 （前面那个 <span class="math inline">\(-1\)</span> 的意思是逆矩阵）</p><p>所以只要把上文代码中的 <code>wn(cos(p/mid),sin(p/mid))</code> 改成 <code>wn(cos(-p/mid),sin(-p/mid))</code> 即可。</p><p>证明是个构造证明，我也不会从暴力手算 <span class="math inline">\(A_{i,j}\)</span> 逆矩阵出发证明，而只会验证 <span class="math inline">\(A\times B=\epsilon\)</span>,<span class="math inline">\(B\)</span> 即为你构造的那个逆矩阵。</p><h4 id="快速数论变换">快速数论变换</h4><p>把单位根换成原根有相同性质。</p>]]></content>
    
    
    <categories>
      
      <category>数学</category>
      
    </categories>
    
    
    <tags>
      
      <tag>多项式</tag>
      
      <tag>gf</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>anticube</title>
    <link href="/2021/07/06/agc003d/"/>
    <url>/2021/07/06/agc003d/</url>
    
    <content type="html"><![CDATA[<h3 id="题意">题意</h3><p><a href="https://atcoder.jp/contests/agc003/tasks/agc003_d">Link</a></p><p>给你 <span class="math inline">\(n\)</span> 个数，让你在这些数中间选出尽可能多的数使得，对于任意两个选出来的数，乘积不是完全立方数。</p><h3 id="题解">题解</h3><p>我们可以发现，如果 <span class="math inline">\(a\times b\)</span> 为完全立方数，那么分解质因数。</p><p><span class="math inline">\(a=\prod p_i^{a_i}\)</span>,<span class="math inline">\(b=\prod p_i^{b_i}\)</span>。那么应该有 <span class="math inline">\(\forall i,(a_i+b_i)\bmod{3}=0\)</span>。</p><p>我们把每个数的立方因子都消掉。</p><p><span class="math inline">\(A=\prod p_i^{a_i\bmod 3}\)</span>。</p><p>所以我们只需要找出对应 <span class="math inline">\(A_i+B_i=3\)</span> 的这样一组的 <span class="math inline">\(A,B\)</span> 看那一组数多( <span class="math inline">\(A,B\)</span> 指的是消去立方因子后的)。</p><p>这样的任意一个 <span class="math inline">\(A\)</span> 对会一一对应一个使得 <span class="math inline">\(A\times B=k^3\)</span> 的 <span class="math inline">\(B\)</span>。</p><p>我们只需要贪心的选择个数多的那个数即可。</p><hr /><p>如何快速分解质因数？</p><p>首先第一步消去立方因子的过程我们只需要枚举到 <span class="math inline">\(\sqrt[3]{n}\)</span> 的质数就行了，大于 <span class="math inline">\(\sqrt[3]{n}\)</span> 的数不可能是。</p><p>第二步对一个 <span class="math inline">\(A\)</span> 找 <span class="math inline">\(B\)</span> 的过程类似，首先暴力的找 <span class="math inline">\(\sqrt[3]{lim}\)</span> 以下范围的（注意这个是 <span class="math inline">\(lim\)</span> ，而不是你具体分解的 <span class="math inline">\(n\)</span>）。</p><p>剩下的形式若不是<span class="math inline">\(1\)</span> 只可能为 <span class="math inline">\(p,pq,p^2(p,q\in prime)\)</span> 三种形式（想一下二次二项式可能性只有这仨）</p><p>只用判断一下剩下的是不是完全平方数即可。</p><h3 id="复杂度分析">复杂度分析</h3><p>除去平方因子+用 <span class="math inline">\(map\)</span> 枚举 <span class="math inline">\(A\)</span> 找 <span class="math inline">\(B\)</span>。</p><p><span class="math inline">\(\mathcal{O(n\frac{\sqrt[3]{Max}}{\ln \sqrt[3]{Max}}+n\frac{\sqrt[3]{Max}}{\ln \sqrt[3]{Max}}+n\log n)}\)</span></p><p>参考代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> int long long</span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N=<span class="hljs-number">3000</span>;<br><span class="hljs-keyword">int</span> p[N],pr[N],tot,pw[N];<br><span class="hljs-built_in">map</span>&lt;<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span>&gt; cnt;<br><span class="hljs-comment">////////////////////////// 文化课期间重写的，看起来丑很正常</span><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">div</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span><span class="hljs-comment">// 消去平方因子</span></span><br><span class="hljs-function"></span>&#123;   <br>    <span class="hljs-keyword">int</span> X=x,tx=x;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=tot&amp;&amp;pw[i]&lt;=x;i++)<br>        <span class="hljs-keyword">if</span>(x%p[i]==<span class="hljs-number">0</span>) <span class="hljs-keyword">while</span>(x%pw[i]==<span class="hljs-number">0</span>) x/=pw[i];<br>    <span class="hljs-keyword">return</span> x;<br>&#125;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf=<span class="hljs-number">1e10</span>+<span class="hljs-number">1</span>;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">sqt</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span><span class="hljs-comment">// 判断是否为完全平方数</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> v=round(<span class="hljs-built_in">sqrt</span>(x));<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=v<span class="hljs-number">-2</span>;i&lt;=v+<span class="hljs-number">2</span>;i++) <span class="hljs-keyword">if</span>(i*i==x) <span class="hljs-keyword">return</span> i;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">rebuild</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span><span class="hljs-comment">//A 找 B</span></span><br><span class="hljs-function"></span>&#123;   <br>    <span class="hljs-keyword">int</span> X=x,tx=x,res=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=tot&amp;&amp;p[i]*p[i]&lt;=x;i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(x%p[i]==<span class="hljs-number">0</span>)<br>        &#123;<br>            <span class="hljs-keyword">int</span> num=<span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">while</span>(x%p[i]==<span class="hljs-number">0</span>) x/=p[i],num++;<br>            <span class="hljs-keyword">if</span>(num==<span class="hljs-number">1</span>) res=res*p[i]*p[i];<br>            <span class="hljs-keyword">else</span> res=res*p[i];<br>            <span class="hljs-keyword">if</span>(res&gt;=inf) <span class="hljs-keyword">return</span> inf;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(x*x&lt;=tx)res=res*x*x;<br>    <span class="hljs-keyword">else</span>&#123;<span class="hljs-comment">// 这里大概就是判断炸没炸 1e10</span><br>        <span class="hljs-keyword">int</span> s=sqt(x);<br>        <span class="hljs-keyword">if</span>(s==<span class="hljs-number">-1</span>)<br>        &#123;<br>            res=res*x; <span class="hljs-keyword">if</span>(res&gt;=inf) <span class="hljs-keyword">return</span> inf;<br>            res=res*x; <span class="hljs-keyword">if</span>(res&gt;=inf) <span class="hljs-keyword">return</span> inf;<br>            <span class="hljs-keyword">return</span> res;<br>        &#125;<br>        res=res*s;<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><span class="hljs-keyword">int</span> n,a[<span class="hljs-number">300000</span>];<br><span class="hljs-function"><span class="hljs-keyword">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    pr[<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">2</span>;i&lt;=<span class="hljs-number">2000</span>;i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(pr[i]==<span class="hljs-number">0</span>) p[++tot]=i,pw[tot]=i*i*i;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">1</span>;j&lt;=tot&amp;&amp;p[j]*i&lt;=<span class="hljs-number">2000</span>;j++)<br>        &#123;<br>            pr[i*p[j]]=<span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">if</span>(i%p[j]==<span class="hljs-number">0</span>) <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>    read(n);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++) read(a[i]),a[i]=div(a[i]),cnt[a[i]]++;<br>    <span class="hljs-keyword">int</span> ans=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-built_in">map</span>&lt;<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span>&gt;::iterator i=cnt.begin();i!=cnt.end();i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span>((i-&gt;first)==<span class="hljs-number">1</span>)<br>        &#123;<br>            ans++;<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        <span class="hljs-keyword">int</span> rev=rebuild(i-&gt;first);<br>        <span class="hljs-keyword">if</span>(rev==inf) &#123;ans+=i-&gt;second;<span class="hljs-keyword">continue</span>;&#125;<br>        <span class="hljs-keyword">if</span>(cnt.find(rev)==cnt.end()) &#123;ans+=i-&gt;second;<span class="hljs-keyword">continue</span>;&#125;<br>        ans+=max(i-&gt;second,cnt[rev]);<span class="hljs-comment">// 选多的那个</span><br>        cnt[rev]=<span class="hljs-number">0</span>,cnt[i-&gt;first]=<span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld&quot;</span>,ans);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数学</category>
      
    </categories>
    
    
    <tags>
      
      <tag>idea题</tag>
      
      <tag>数论</tag>
      
      <tag>分解质因数</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基本数论</title>
    <link href="/2021/07/06/basic-number-theory/"/>
    <url>/2021/07/06/basic-number-theory/</url>
    
    <content type="html"><![CDATA[<p>说一下一些基本数论算法的实现和简洁证明。</p><p>持续更新中。</p><span id="more"></span><ol type="1"><li><p><span class="math inline">\(exgcd\)</span></p><p>目的：求解方程 <span class="math inline">\(ax+by=(a,b)\)</span> 的一组特解。</p><p>做法：<del>由于他叫exgcd</del>，我们就按求 <span class="math inline">\(\gcd\)</span> 方法试一下。 <span class="math display">\[\begin{aligned}不妨设 (a,b)=1,a&gt;b\\a\cdot x+b\cdot y=&amp;1\\b\cdot y+(a\bmod b+\lfloor\frac{a}{b}\rfloor b)\cdot x=&amp;1\\提取b\\b\cdot(y+\lfloor \frac{a}{b}\rfloor x)+(a\bmod b)x=&amp;1\\问题化归，求解\ bx_1+(a\bmod b)y_1=&amp;1\\\end{aligned}\]</span> <span class="math inline">\(\mathcal{Code}\)</span></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">exgcd</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a,<span class="hljs-keyword">int</span> b,<span class="hljs-keyword">int</span> &amp;x,<span class="hljs-keyword">int</span> &amp;y)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(b==<span class="hljs-number">0</span>)&#123;x=<span class="hljs-number">1</span>,y=<span class="hljs-number">0</span>;<span class="hljs-keyword">return</span> ;&#125;<br>    exgcd(b,a%b,y,x); y-=(a/b)*x;<br>&#125;<br></code></pre></td></tr></table></figure><p>为啥能求逆元？ <span class="math display">\[\begin{aligned}ax+by&amp;=1\\ax+by&amp;=1\pmod{b}\\ax&amp;=1\pmod{b}\end{aligned}\]</span> 显然 <span class="math inline">\(x\)</span> 是 <span class="math inline">\(a\)</span> 在 <span class="math inline">\(\bmod b\)</span> 意义下的逆元</p></li><li><p><span class="math inline">\(excrt\)</span></p><p>目的：合并若干线性同余方程组。 <span class="math display">\[\begin{cases}x\equiv a_1\pmod{p_1}\\x\equiv a_2\pmod{p_2}\\\ \ \ \ \vdots\\x\equiv a_n\pmod{p_n}\end{cases}\]</span> 问题本质等价，合并两个方程。</p><p><span class="math inline">\(x\equiv a_1\pmod{p_1},x\equiv a_2\pmod{p_2}\)</span></p><p>若存在解则解一定能表达成 <span class="math inline">\(x=x_0+k\cdot lcm(p_1,p_2)\)</span>,<span class="math inline">\(x_0\)</span> 是一个特解。</p><p>显然 <span class="math inline">\(p_1\mid lcm(p_1,p_2),p_2\mid lcm(p_1,p_2)\)</span>。</p><p>现在目的找到这样的一个特解 <span class="math inline">\(k\)</span>。 <span class="math display">\[k=k_1\cdot p_1+a_1,k=k_2\cdot p_2+a_2\Rightarrow k_1\cdot p_1+a_1=k_2\cdot p_2+b_2\\\Rightarrow k_1\cdot p_1-k_2\cdot p_2=b_2-b_1\]</span> 可以用 <span class="math inline">\(exgcd\)</span> 求一组 <span class="math inline">\(k_1,k_2\)</span> 特解。</p><p>·</p></li><li><p><span class="math inline">\(Miller\ rabin\)</span></p><ol type="1"><li><p>首先费马小定理判断一波,<span class="math inline">\(p\in \mathtt{prime} \Leftrightarrow \forall (a,p)=1,a^{p-1}\equiv1\pmod{p}\)</span>。</p></li><li><p>然后二次探测。</p><p>就是如果 <span class="math inline">\(a^{2}\equiv 1\pmod{p}\)</span>,如果 <span class="math inline">\(p\)</span> 是质数，那么必定有 <span class="math inline">\(p\mid(a-1)\)</span>,或者 <span class="math inline">\(p\mid(a+1)\)</span>。</p><p>否则 <span class="math inline">\(p\)</span> 是合数。</p><p><span class="math inline">\(a^{p-1}\equiv 1\pmod{p}\)</span>。</p><p>此时如果 <span class="math inline">\(p\)</span>是质数，<span class="math inline">\(a^{\frac{p-1}{2}}\equiv 1\ or\ -1\pmod{p}\)</span>，如果 <span class="math inline">\(\equiv 1\)</span> 我们就继续探测。</p><p>本质上我们就是通过看 <span class="math inline">\(a^b\equiv 1\pmod{p}\)</span> 这种形式来看 <span class="math inline">\(p\)</span> 是否为质数。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">bool</span> <span class="hljs-title">mr</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> p)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> b=x<span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">while</span>(!(b&amp;<span class="hljs-number">1</span>)) b&gt;&gt;=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">int</span> k=qpow(p,b,x);<br>    <span class="hljs-keyword">while</span>(b&lt;=x<span class="hljs-number">-1</span>)<br>    &#123;<br>        <span class="hljs-keyword">int</span> muls=k*k%x;<br>        <span class="hljs-keyword">if</span>(muls==<span class="hljs-number">1</span>&amp;&amp;(k!=<span class="hljs-number">1</span>&amp;&amp;k!=x<span class="hljs-number">-1</span>)) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        k=muls;b&lt;&lt;=<span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(k!=<span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-keyword">int</span> p[]=&#123;<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">7</span>,<span class="hljs-number">11</span>,<span class="hljs-number">13</span>,<span class="hljs-number">15</span>,<span class="hljs-number">17</span>,<span class="hljs-number">19</span>,<span class="hljs-number">23</span>&#125;;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">bool</span> <span class="hljs-title">judge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(!(x&amp;<span class="hljs-number">1</span>)) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;=<span class="hljs-number">8</span>;i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(x==p[i]) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span>(mr(x,p[i])==<span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>当 <span class="math inline">\(p\)</span> 的值域是<code>long long</code> 范围时，乘法可能会需要快速乘。</p></li></ol></li><li><p>找阶&amp;原根。</p><p>这个东西说实话只要真正了解定义就能如同行云流水般解决了。</p><ol type="1"><li><p>阶</p><p>最小的使得 <span class="math inline">\(a^x\equiv 1\pmod{p}\)</span> 的正整数 <span class="math inline">\(x\)</span>,被称为 <span class="math inline">\(a\bmod p\)</span> 的阶。</p><p>由于 <span class="math inline">\(a^{\phi(p)}\equiv 1\pmod{p}\)</span>,所以 <span class="math inline">\(ord_p(a)\mid\phi(p)\)</span>。</p><p>证明很显然，如果不整除，可以用类似辗转相除的方法推出，<span class="math inline">\(\exists \ x&lt;ord_p(a),a^x\equiv 1\pmod{p}\)</span>。</p><p>求法可以把 <span class="math inline">\(\phi(p)\)</span> 的质因子一个一个消去，来看是否有 <span class="math inline">\(a^{\frac{\phi(p)}{k}}\equiv 1\pmod{p}\)</span>。</p><p>复杂度 <span class="math inline">\(O(pollard-\rho)+\log(n)\)</span>。</p></li><li><p>原根</p><p>满足 <span class="math inline">\(ord_p(a)=\phi(p)\)</span> 的 <span class="math inline">\(a\)</span> 被叫做 <span class="math inline">\(p\)</span> 的一个原根。</p><p>原根性质：若 <span class="math inline">\(g\)</span> 为 <span class="math inline">\(p\)</span> 其中一个原根，那么 <span class="math inline">\(1,g,g^2\cdots g^{\phi(p)-1}\)</span> 互不相同。</p><p>证明可以用反证法。</p><p>由于 如果 <span class="math inline">\((k,p)=1\)</span>,有 <span class="math inline">\(0,k,2k,\cdots,(p-1)k\bmod p\)</span> 一定互不相同。</p><p>也是反证，如果 <span class="math inline">\(xk\equiv yk\pmod{p}\)</span>,那么 <span class="math inline">\((x-y)k\equiv 0\pmod{p}\)</span>,与 <span class="math inline">\((k,p)=1\)</span> 矛盾。</p><p>所有 <span class="math inline">\(p\)</span> 有 <span class="math inline">\(\phi(\phi(p))\)</span> 个原根。</p><p>原根有很多，随机找可以在 <span class="math inline">\(O(\frac{p}{\phi(\phi(p))})\)</span> 的期望次找到。</p><p>设 <span class="math inline">\(\phi(p)=\prod p_i^{\alpha_i}\)</span>。</p><p>那么判断一个数 <span class="math inline">\(x\)</span> 是不是原根就看 是否 <span class="math inline">\(\forall \ k,x^\frac{\phi(p)}{p_k}\not \equiv 1\pmod{p}\)</span>。</p><p>复杂度 <span class="math inline">\(O(pollard-\rho)+\frac{p}{\phi(\phi(p))}\log(n)\)</span>。</p></li></ol></li></ol>]]></content>
    
    
    <categories>
      
      <category>数学</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数论</tag>
      
      <tag>分解质因数</tag>
      
      <tag>miller-rabin</tag>
      
      <tag>pollard-rho</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2021/07/06/Untitled/"/>
    <url>/2021/07/06/Untitled/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>arc122D</title>
    <link href="/2021/06/13/arc122D/"/>
    <url>/2021/06/13/arc122D/</url>
    
    <content type="html"><![CDATA[<h3 id="题意">题意</h3><p><a href="https://atcoder.jp/contests/arc122/tasks/arc122_d">Link</a></p><h3 id="题解">题解</h3><h4 id="hint1">hint1</h4><p>考虑权值 <span class="math inline">\(v\)</span> 的合法性。</p><p>如果 <code>Alice</code> 任意选一个 <span class="math inline">\(a_i\)</span> ,<code>Bob</code> 都有一个对策 <span class="math inline">\(a_j\)</span>, <span class="math inline">\(s.t. \ a_i\operatorname{xor} a_j\leq v\)</span>，那么 <span class="math inline">\(v\)</span> 就是合法的。</p><h4 id="hint2">hint2</h4><p>想要让 <span class="math inline">\(v\)</span> 尽可能大，所以从二进制的高位到低位依次考虑。</p><h4 id="solution">solution</h4><p>建出全局的 trie.</p><ol type="1"><li><p>对于第 <span class="math inline">\(x\)</span> 位（当前最高位） ，如果是该位是 <span class="math inline">\(0\)</span> 的数的个数与是 <span class="math inline">\(1\)</span> 的数的个数都是偶数，</p><p>那么 <code>Bob</code> 完全可以当 <code>Alice</code> 选一个这位是 <code>0</code> 的数时，也选另一个该位为 <code>0</code>的数；选该位为<code>1</code>的数时候也选另一个该位为<code>1</code>的数，从而使这位 <span class="math inline">\(\operatorname{xor}\)</span> 都为<code>0</code>。</p><p>问题变成了两个子问题，相当于在 <code>trie</code> 从节点 <span class="math inline">\(u\)</span> 的问题 ，化归到 <span class="math inline">\(x\)</span> 的两个儿子的独立问题。</p></li><li><p>否则，我们必须选择一个该位为 <span class="math inline">\(0\)</span>,一个该位为 <span class="math inline">\(1\)</span> 的数。然后问题变为上述情况。</p><p>注意如果变成上述情况，该位 <span class="math inline">\(\operatorname{xor}\)</span> 只能为 <span class="math inline">\(0\)</span>，而如果选择一个该位为 <span class="math inline">\(0\)</span>,一个该位为 <span class="math inline">\(1\)</span> 的数，那么此位 <span class="math inline">\(\operatorname{xor}\)</span> 就是 <span class="math inline">\(1\)</span>，由于是最高位，显然 <span class="math inline">\(1\)</span> 更优。</p><p>这时，问题转化为要在两个集合 <span class="math inline">\(S_1,S_2\)</span> 中选 <span class="math inline">\(x\in S_1\)</span>,使得 <span class="math inline">\(\min_{y\in S_2}{x\operatorname{xor}y}\)</span> 最大。</p><p>我们可以一个一个插入trie中，在另一个集合一个一个查询 <span class="math inline">\(\min\)</span> 然后再取<span class="math inline">\(\max\)</span>。</p></li></ol><p>注意我们分治是保证了 <span class="math inline">\(\sum size=n\)</span> 一定。</p><p>然后情况2，的复杂度是 <span class="math inline">\(\mathcal{O(size\times T)}\)</span>。</p><p>所以均摊下来是 <span class="math inline">\(\mathcal{O(nT)}\)</span></p>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>trie</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>noi2016循环之美</title>
    <link href="/2021/03/28/beauty-of-cycle/"/>
    <url>/2021/03/28/beauty-of-cycle/</url>
    
    <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/P1587">循环之美</a></p><h3 id="step1">step1</h3><p>首先根据小学知识，如果 <span class="math inline">\(k=10\)</span> ,那么如果分数 <span class="math inline">\(\frac{a}{b},(a,b)=1\)</span> 想要纯循环，必须满足 <span class="math inline">\(2\not\mid b,5\not\mid b\)</span>。</p><p>可以猜测如果 <span class="math inline">\(k\not =10\)</span> 时，<span class="math inline">\(\frac{a}{b}\)</span> 纯循环 <span class="math inline">\(\Leftrightarrow\)</span> <span class="math inline">\((b,k)=1\)</span>。</p><p>那么如何证明呢?</p><p>只要余数出现循环代表商出现循环。</p><p>考虑余数形式一定是 <span class="math inline">\(a,ak\bmod b,ak^2\bmod b,ak^3\bmod b,\cdots\)</span>。</p><p>如果有 <span class="math inline">\(ak^i\equiv ak^j\pmod{b}\)</span>,由于 <span class="math inline">\((a,b)=1\)</span>,所以 <span class="math inline">\(a\)</span> 存在逆元，所以 <span class="math inline">\(k^i\equiv k^j\pmod{b}\)</span>。</p><p>当 <span class="math inline">\((k,b)=1\)</span>,<span class="math inline">\(k\)</span> 存在逆元，显然有 <span class="math inline">\(1\equiv k^{j-i}\pmod{b}\)</span>，是纯循环。</p><p><span class="math inline">\(\frac{k^{i}}{g^t}\equiv\frac{k^j}{g^t}\pmod{\frac{b}{g^t}}\)</span>,由于一次可能除不尽，所以 <span class="math inline">\(i\)</span> 为最小的使 <span class="math inline">\((\frac{k^i}{g^t},\frac{b}{g^t})=1\)</span> 的 <span class="math inline">\(i\)</span>, <span class="math inline">\(g=\gcd(k,b)\)</span>。</p><p>那么 原始化为 <span class="math inline">\(\frac{k^{i}}{g^t}\equiv\frac{k^i}{g^t}k^{j-i}\pmod{\frac{b}{g^t}}\)</span>,<span class="math inline">\(k^{j-i}\equiv 1\pmod{\frac{b}{g^t}}\)</span>，这个的循环节显然会比 <span class="math inline">\(k^{j-i}\equiv1\pmod{b}\)</span> 要小，所以不是纯循环。</p><h3 id="step2">step2</h3><p>问题分析的很清楚了。</p><p>有拆第一个 <span class="math inline">\(gcd=1\)</span> 的；有拆第二个 <span class="math inline">\(gcd=1\)</span> 的，而我选择都拆。。。 <span class="math display">\[\begin{aligned}&amp;\sum_{i=1}^m\sum_{j=1}^n[(i,k)=1][(i,j)=1]\\&amp;\sum_{i=1}^m[(i,k)]=1\sum_{j=1}^n\sum_{d\mid i,d\mid j}\mu(d)\\&amp;\sum_{d=1}^n\mu(d)\sum_{d|i}^m[(i,k)]=1\sum_{j=1,d|j}^n1\\&amp;\sum_{d=1}^n\mu(d)\sum_{d|i}^m\ \ \sum_{t|i,t|k}\mu(t)\lfloor\frac{n}{d}\rfloor\\&amp;\sum_{t|k}\mu(t)\sum_{d=1}^n\lfloor\frac{n}{d}\rfloor\mu(d)\sum_{d|i,t|i}^m1\\&amp;\sum_{t|k}\mu(t)\sum_{d=1}^n\lfloor\frac{n}{d}\rfloor\mu(d)\frac{m}{lcm(d,t)},\frac{m}{lcm(d,t)}=\frac{m(d,t)}{d\cdot t}\\&amp;\sum_{t|k}\mu(t)\sum_{d=1}^n\lfloor\frac{n}{d}\rfloor\mu(d)\lfloor\frac{m(d,t)}{dt}\rfloor\\&amp;\sum_{t|k}\mu(t)\sum_{g|t}\sum_{d=1}^n\lfloor\frac{n}{d}\rfloor\mu(d)\lfloor\frac{mg}{dt}\rfloor[(d,t)=g]\\&amp;\sum_{t|k}\mu(t)\sum_{g|t}\sum_{d=1}^{n/g}\lfloor\frac{n}{dg}\rfloor\mu(dg)\lfloor\frac{m}{dt}\rfloor[(d,t)=1]\\&amp;\sum_{t|k}\mu(t)\sum_{g|t}\sum_{h|t}\mu(h)\sum_{d=1}^{n/gh}\lfloor\frac{n}{dgh}\rfloor\mu(dgh)\lfloor\frac{m}{dth}\rfloor\\\end{aligned}\]</span> 冷静一下。</p><hr />$$<span class="math display">\[\begin{aligned}&amp;\sum_{t|k}\mu(t)\sum_{g|t}\sum_{h|t}\mu(h)\sum_{d=1}^{n/gh}\mu(dgh)\lfloor\frac{\frac{n}{gh}}{d}\rfloor\lfloor\frac{\frac{m}{th}}{d}\rfloor\\\end{aligned}\]</span><p>$$</p><p>整除分块的形式一目了然。</p><p>问题转化为求解 <span class="math inline">\(\sum_{i=1}^{n}\mu(Ti)\)</span>。 <span class="math display">\[\begin{aligned}g(n,T)=&amp;\sum_{i=1}^{n}\mu(Ti)\\=&amp;\sum_{i=1}^{n}\mu(T)\mu(i)[(T,i)=1]\\=&amp;\mu(T)\sum_{i=1}^{n}\mu(i)\sum_{f|i,f|T}\mu(f)\\=&amp;\mu(T)\sum_{f|T}\mu(f)\sum_{i=1}^{n/f}\mu(if)=\mu(T)\sum_{f|T}\mu(f)g(n/f,f)\\\end{aligned}\]</span> 这个直接记忆化。</p><p>然后做完了。</p>]]></content>
    
    
    <categories>
      
      <category>数学</category>
      
    </categories>
    
    
    <tags>
      
      <tag>idea题</tag>
      
      <tag>筛法</tag>
      
      <tag>整除分块</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>loj509</title>
    <link href="/2021/03/10/loj509/"/>
    <url>/2021/03/10/loj509/</url>
    
    <content type="html"><![CDATA[<h3 id="step1">step1</h3><p>首先显然有 <span class="math inline">\(|KX|=\sqrt{a},|YL|=\sqrt{b}\)</span>。</p><p>所以延长 <span class="math inline">\(KX,YL\)</span> ,不难发现：<span class="math inline">\(|KL|=\sqrt{(\sqrt{a}+\sqrt{b})^2+1^2}\)</span>。</p><p><span class="math inline">\(S=|KL|^2=(\sqrt{a}+\sqrt{b})^2+1=a+b+1+2\sqrt{ab}\)</span>。</p><p>问题转化：求 <span class="math inline">\(\sum_{i=1}^n\sum_{j=1}^m[i\times j\in 完全平方数]\)</span>。</p><hr /><h3 id="step2">step2</h3><p>以下说的 <span class="math inline">\(i,j\)</span> 都是满足 <span class="math inline">\(i\times j\)</span> 是完全平方数的 <span class="math inline">\(i,j\)</span>。</p><p>所以，我们发现，如果 <span class="math inline">\(p|i,p|j，\ \ p\in prime\)</span> 那么 <span class="math inline">\(i,j\)</span> 的 <span class="math inline">\(p\)</span> 因子的奇偶性相同。</p><p>思路大概明晰了，我们尝试提取 <span class="math inline">\(i,j\)</span> 的平方因子。</p><p><span class="math inline">\(i=a\times x,j=b\times y\)</span>。</p><p><span class="math inline">\(a,b\)</span> 均是完全平方数。</p><p>那么 <span class="math inline">\(x\times y\)</span> 也为完全平方数。</p><p><span class="math inline">\(x,y\)</span> 剩余了啥？ <span class="math inline">\(x,y\)</span> 的任意 <span class="math inline">\(p_i\)</span> 因子就行都相同，此时还只可能为 <span class="math inline">\(0\ or \ 1\)</span>。</p><p>发现 <span class="math inline">\(x=y\)</span>。</p><hr /><h3 id="step3">step3</h3><p>枚举 <span class="math inline">\(x\)</span> 。</p><p>原式可写为 ： <span class="math display">\[\begin{aligned}\sum_{x=1}^{n}[\sqrt{x}\not\in\mathbb{Z}]\sum_{a=1}^{n/x}[\sqrt{a}\in \mathbb{Z}]\sum_{b=1}^{m/x}[\sqrt{b}\in\mathbb{Z}]\\\sum_{x=1}^{n}[\sqrt{x}\not\in\mathbb{Z}]\lfloor\sqrt{\lfloor\frac{n}{x}\rfloor}\rfloor\lfloor\sqrt{\lfloor\frac{m}{x}\rfloor}\rfloor\\\sum_{x=1}^{n}\mu(x)^2 \lfloor\sqrt{\lfloor\frac{n}{x}\rfloor}\rfloor\lfloor\sqrt{\lfloor\frac{m}{x}\rfloor}\rfloor\end{aligned}\]</span> 是不是可以 <span class="math inline">\(\mathcal{O(n)}\)</span> 求了呢？一个大大的 <span class="math inline">\(n\leq 1.5\times 10^{16}\)</span> 打在你脸上。</p><hr /><h3 id="step4">step4</h3><p>发现显然可以整除分块，但是复杂度不是很优，还要求 <span class="math inline">\(\sum\mu(i)^2\)</span> 。</p><h4 id="如何求-summui2">如何求 <span class="math inline">\(\sum\mu(i)^2\)</span></h4><p>考虑 <span class="math inline">\(\mu\)</span> 本质是在对于因数个数容斥。</p><p>正难则反。我们考虑容斥，我们先 naive 地求出 <span class="math inline">\(\sum_{p}\sum_{i=1}^{n}[p^2|i,\sqrt{i}\in\mathbb{Z}]\)</span>,就是平方因子包括 <span class="math inline">\(p\)</span> 的数的个数。</p><p>形式化地写出： <span class="math inline">\(\sum_{p}\lfloor\frac{n}{p^2}\rfloor\)</span></p><p>但是此时我们算重了，我们算重的是两个质数积的平方的因数，所以类似的有平方因子包含 <span class="math inline">\(p_i\cdot p_j\)</span> 的。</p><p>形式化写出：<span class="math inline">\(\sum _{t=p_i\cdot p_j}\lfloor \frac{n}{t^2}\rfloor\)</span>。</p><p>利用 <span class="math inline">\(\mu\)</span> 对因子的容斥。 <span class="math display">\[\sum_{i=1}^n \mu^2(i)\\=\sum_{i=1}^n\mu(i) \lfloor\frac{n}{i^2}\rfloor\\=\sum_{i=1}^{\lfloor\sqrt{n}\rfloor}\mu(i) \lfloor\frac{n}{i^2}\rfloor\\\]</span> 此部分复杂度为 <span class="math inline">\(\mathcal{O(n^\frac{1}{4})}\)</span>。</p><hr /><p>复杂度为什么对？怎么保证？</p><p>发现<span class="math inline">\(\sqrt{\frac{n}{x}}\)</span> ，当 <span class="math inline">\(1\leq x\leq n^\frac{1}{3}\)</span> 时取值个数只可能为 <span class="math inline">\(n^\frac{1}{3}\)</span>。</p><p>当 <span class="math inline">\(n^{\frac{1}{3}}&lt;x\leq n\)</span> 时，取值范围为 <span class="math inline">\([1,\sqrt{\frac{n}{n^{\frac{1}{3}}}}]=[1,n^{\frac{1}{3}}]\)</span>。</p><p>若用 <span class="math inline">\(t=\sqrt{\frac{n}{x}}\)</span> , 那么 <span class="math inline">\(x=\frac{n}{t^2}\)</span>。</p><p>我们现在用积分算复杂度。</p><p>第一部分： <span class="math display">\[\int_{1}^{n^\frac{1}{3}}{x}^{\frac{1}{4}}dx\\={x^{\frac{5}{4}}}{\Big|}^{n^{\frac{1}{3}}}_0\\=n^{\frac{5}{12}}\]</span> 第二部分： <span class="math display">\[\int_{1}^{n^\frac{1}{3}}({\frac{n}{t^2}})^{\frac{1}{4}}dt\\=n^{\frac{1}{4}}\int_{1}^{n^\frac{1}{3}}x^{-\frac{1}{2}}dt\\={n^{\frac{1}{4}}x^{\frac{1}{2}}}\Big|^{n^{\frac{1}{3}}}_0\\=n^{\frac{1}{4}}\cdot n^{\frac{1}{6}}=n^{\frac{5}{12}}\]</span> 发现这个 <span class="math inline">\(\mathcal{O(n^\frac{5}{12})}\)</span> 常数不是很优。</p><p>可以预处理一部分的 <span class="math inline">\(\sum\mu(x)^2\)</span> 然后降低常数，（或许可以证明能降低复杂度下界）</p>]]></content>
    
    
    <categories>
      
      <category>数学</category>
      
    </categories>
    
    
    <tags>
      
      <tag>idea题</tag>
      
      <tag>筛法</tag>
      
      <tag>整除分块</tag>
      
      <tag>mu容斥</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>cf323c</title>
    <link href="/2021/03/06/cf323c/"/>
    <url>/2021/03/06/cf323c/</url>
    
    <content type="html"><![CDATA[<p>比较水的一个题。</p><p>主要是考虑这个排列的性质。</p><p>如果只考虑一次询问，让你把在 <span class="math inline">\(a:[l_1,r_1]\)</span> 里的与 <span class="math inline">\(b:[l_2,r_2]\)</span> 的相同数的个数求出来。</p><p>我们有这样一种思路，把 <span class="math inline">\(a_x\)</span> 一个一个加进去，直到 <span class="math inline">\(x=l_1-1\)</span>。 记录当前状态，然后接着加入，直到 <span class="math inline">\(x=r\)</span> ，记录状态。</p><p>把这两个状态分别求出在 <span class="math inline">\(b:[l_2,r_2]\)</span> 里面有多少个。在相减，便是所求。</p><p>线段树维护即可，设 <span class="math inline">\(p_i\)</span> 表示 <span class="math inline">\(i\)</span> 在 <span class="math inline">\(b\)</span> 中的位置。那么加入 <span class="math inline">\(a_x\)</span> 操作等价于在 <span class="math inline">\(b\)</span> 的 <span class="math inline">\({p_{a_x}}\)</span> 处加 <span class="math inline">\(1\)</span> ，然后区间求和。</p><p>那么多次询问用主席树记录状态即可。</p><p>代码不放了。</p>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>主席树</tag>
      
      <tag>小idea题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>zjoi2015 幻想乡战略游戏</title>
    <link href="/2021/03/01/zjoi2015/"/>
    <url>/2021/03/01/zjoi2015/</url>
    
    <content type="html"><![CDATA[<p>这里提供一个复杂度比较对的树剖做法。</p><p>这个题分为两步。</p><p>首先我们要找到那个使得 <span class="math inline">\(\sum\limits_{i=1}dist(u,i)d_i\)</span> 最小的 <span class="math inline">\(u\)</span> 。</p><p>其实这个点是有定义的。</p><p>考虑我们怎么定义重心的（或者说重心的性质）。</p><p>有重心 <span class="math inline">\(u\)</span> 为使得 <span class="math inline">\(\sum\limits_{i=1}dist(u,i)\)</span> 最小的 <span class="math inline">\(u\)</span>。</p><p>那么本题所定义的可以理解成带权重心。</p><p>考虑如何求带权重心。</p><p>首先随便定一个根，把这棵树转化成有根树。其中整个树的权值和为 <span class="math inline">\(all\)</span> ,点 <span class="math inline">\(x\)</span> 的子树权值和为 <span class="math inline">\(sum_x\)</span>。</p><p>那么如果当前在点 <span class="math inline">\(x\)</span> ，如果 <span class="math inline">\(x\)</span> 的某一个儿子 <span class="math inline">\(y\)</span> 更满足使 <span class="math inline">\(\sum dist(y,i)d_i\)</span> 的条件，那么必须满足 <span class="math inline">\((all-sum_y)\cdot w&lt;sum_y\cdot w\)</span> ,也就是 <span class="math inline">\(sum_y&gt;\frac{all}{2}\)</span> 。</p><p>那么把 <span class="math inline">\(x\)</span> 的重心转到 <span class="math inline">\(y\)</span> 一定更优，由于此时 <span class="math inline">\(sum_y&gt;\frac{all}{2}\)</span> 所以只可能有一个儿子满足转移条件。</p><p>如果 <span class="math inline">\(x\)</span> 的儿子只存在等于或者不存在 <span class="math inline">\(sum_y&gt;\frac{all}{2}\)</span>，那么 <span class="math inline">\(x\)</span> 遍为重心。</p><p>所以现在只需要维护子树权值和，找到最深的满足 <span class="math inline">\(sum_y&gt;\frac{all}{2}\)</span> 的 <span class="math inline">\(y\)</span> 便为所求位置。</p><p>这个可以通过用 <span class="math inline">\(dfs\)</span> 序列建出线段树，在线段树上 找到一个最靠后，满足 <span class="math inline">\(sum_y&gt;\frac{all}{2}\)</span> 的 <span class="math inline">\(y\)</span>,在线段树上二分即可。</p><p>由于一条链的 <span class="math inline">\(dfs\)</span> 序严格单调增，所以可以二分。</p><p>那么现在要求解答案。(<span class="math inline">\(f_i\)</span> 表示 <span class="math inline">\(u\)</span> 的第 <span class="math inline">\(i\)</span> 级祖先,<span class="math inline">\(sum_j\)</span> 表示以 <span class="math inline">\(j\)</span> 为根的子树权值和。)。 <span class="math display">\[\begin{aligned}\sum_{i} dist(u,i)&amp;=\sum_i dep(u)+dep(i)-2\cdot dep(lca(u,i))\\&amp;=dep(u) \sum_i 1+\sum_i dep(i)+\sum_i dep(lca(u,i))\\\sum_idep(lca(u,i))&amp;=\sum_{j=1}dep_{f_i} (sum_{f_{j}}-sum_{f_{j-1}})\\&amp;=\sum_{j=1}dep_{f_i}\cdot sum_{f_j}-\sum_{j=0}dep_{f_{j+1}}sum_j=\sum_{j=1}(dep_{f_{j}}-{dep_{f_{j+1}}})sum_j\\&amp;=\sum_{j=1} w_jsum_j\end{aligned}\]</span> 怎么维护？</p><p>链剖维护的充要条件是维护的信息可以合并，线段树区间修改的充要条件是可以 <span class="math inline">\(O(1)\)</span> pushdown，同时可以合并。</p><p>设 <span class="math inline">\(v_j=w_jsum_j\)</span> ,我们现在要维护 <span class="math inline">\(v_j\)</span> 的区间和，同时要能对 <span class="math inline">\(sum_j\)</span> 区间修改。</p><p>考虑一段区间怎么快速更新和，显然有 <span class="math inline">\(\sum_{j=l}^{r}w_j(sum_j+v)=\sum_{j=l}^rw_jsum_j+v\cdot sum_{j=l}^rw_j\)</span>。</p><p>发现只需要维护区间的 <span class="math inline">\(w_j\)</span> 的和，便能更新区间的 <span class="math inline">\(v_j\)</span> 的和，而 <span class="math inline">\(w_j\)</span> 的值不变，是 <span class="math inline">\(j\)</span> 的一个属性所以很好维护。</p><p>那么这道题就做完了。时间复杂度 <span class="math inline">\(\mathcal{O(n\log n\log n)}\)</span> 。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> int long long</span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N=<span class="hljs-number">2e5</span>+<span class="hljs-number">10</span>;<br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span>&gt; &gt;v[N];<span class="hljs-keyword">int</span> fa[N],w[N];<br><span class="hljs-keyword">int</span> n,q;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">read</span><span class="hljs-params">(<span class="hljs-keyword">int</span> &amp;x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">char</span> c=getchar();x=<span class="hljs-number">0</span>;<span class="hljs-keyword">bool</span> f=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(c&gt;<span class="hljs-string">&#x27;9&#x27;</span>||c&lt;<span class="hljs-string">&#x27;0&#x27;</span>) &#123;<span class="hljs-keyword">if</span>(c==<span class="hljs-string">&#x27;-&#x27;</span>) f=<span class="hljs-number">1</span>;c=getchar();&#125;<br>    <span class="hljs-keyword">while</span>(c&lt;=<span class="hljs-string">&#x27;9&#x27;</span>&amp;&amp;c&gt;=<span class="hljs-string">&#x27;0&#x27;</span>) x=(x&lt;&lt;<span class="hljs-number">1</span>)+(x&lt;&lt;<span class="hljs-number">3</span>)+c-<span class="hljs-string">&#x27;0&#x27;</span>,c=getchar();<br>    <span class="hljs-keyword">if</span>(f) x=-x;<br>&#125;<br><span class="hljs-keyword">int</span> sz[N],dfn[N],hson[N],dep[N],dis[N];<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> f)</span></span><br><span class="hljs-function"></span>&#123;<br>    fa[x]=f;sz[x]=<span class="hljs-number">1</span>;<span class="hljs-keyword">int</span> mx=<span class="hljs-number">0</span>;dep[x]=dep[f]+<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;v[x].size();i++)<br>    &#123;<br>        <span class="hljs-keyword">int</span> y=v[x][i].first,z=v[x][i].second;<br>        <span class="hljs-keyword">if</span>(y==f) <span class="hljs-keyword">continue</span>;dis[y]=dis[x]+z;<br>        w[y]=z;dfs(y,x);sz[x]+=sz[y];<br>        <span class="hljs-keyword">if</span>(sz[y]&gt;mx) mx=sz[y],hson[x]=y;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">int</span> top[N],cnt,num[N];<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">redfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> f,<span class="hljs-keyword">int</span> tp)</span></span><br><span class="hljs-function"></span>&#123;<br>    dfn[x]=++cnt;num[cnt]=x;top[x]=tp;<br>    <span class="hljs-keyword">if</span>(hson[x]) redfs(hson[x],x,tp);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;v[x].size();i++)<br>    &#123;<br>        <span class="hljs-keyword">int</span> y=v[x][i].first;<br>        <span class="hljs-keyword">if</span>(y==f||y==hson[x]) <span class="hljs-keyword">continue</span>;<br>        redfs(y,x,y);<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">seg</span>&#123;</span><br>    <span class="hljs-keyword">int</span> l,r,tag,mx,v,sumv;<br>&#125;t[N&lt;&lt;<span class="hljs-number">2</span>];<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">build</span><span class="hljs-params">(<span class="hljs-keyword">int</span> pos,<span class="hljs-keyword">int</span> l,<span class="hljs-keyword">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br>    t[pos].l=l,t[pos].r=r;<br>    <span class="hljs-keyword">if</span>(l==r) <br>    &#123;<br>        t[pos].v=w[num[l]];<br>        <span class="hljs-keyword">return</span> ;<br>    &#125;<br>    <span class="hljs-keyword">int</span> mid=l+r&gt;&gt;<span class="hljs-number">1</span>;<br>    build(pos&lt;&lt;<span class="hljs-number">1</span>,l,mid);build(pos&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>,mid+<span class="hljs-number">1</span>,r);<br>    t[pos].v=t[pos&lt;&lt;<span class="hljs-number">1</span>].v+t[pos&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>].v;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">pushdown</span><span class="hljs-params">(<span class="hljs-keyword">int</span> pos)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(t[pos].tag==<span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> ;<br>    <span class="hljs-keyword">int</span> tag=t[pos].tag;t[pos].tag=<span class="hljs-number">0</span>;<br>    t[pos&lt;&lt;<span class="hljs-number">1</span>].tag+=tag,t[pos&lt;&lt;<span class="hljs-number">1</span>].mx+=tag;<br>    t[pos&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>].tag+=tag,t[pos&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>].mx+=tag;<br>    t[pos&lt;&lt;<span class="hljs-number">1</span>].sumv+=tag*t[pos&lt;&lt;<span class="hljs-number">1</span>].v;<br>    t[pos&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>].sumv+=tag*t[pos&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>].v;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">modify</span><span class="hljs-params">(<span class="hljs-keyword">int</span> pos,<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y,<span class="hljs-keyword">int</span> v)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(x&lt;=t[pos].l&amp;&amp;t[pos].r&lt;=y)<br>    &#123;<br>        t[pos].sumv+=v*t[pos].v;<br>        t[pos].tag+=v;t[pos].mx+=v;<span class="hljs-keyword">return</span> ;<br>    &#125;<br>    pushdown(pos);<br>    <span class="hljs-keyword">int</span> mid=t[pos].l+t[pos].r&gt;&gt;<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span>(y&lt;=mid) modify(pos&lt;&lt;<span class="hljs-number">1</span>,x,y,v);<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(x&gt;mid) modify(pos&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>,x,y,v);<br>    <span class="hljs-keyword">else</span> modify(pos&lt;&lt;<span class="hljs-number">1</span>,x,y,v),modify(pos&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>,x,y,v);<br>    t[pos].mx=max(t[pos&lt;&lt;<span class="hljs-number">1</span>].mx,t[pos&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>].mx);<br>    t[pos].sumv=t[pos&lt;&lt;<span class="hljs-number">1</span>].sumv+t[pos&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>].sumv;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-keyword">int</span> pos,<span class="hljs-keyword">int</span> v)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(t[pos].l==t[pos].r) <span class="hljs-keyword">return</span> t[pos].l;<br>    pushdown(pos);<br>    <span class="hljs-keyword">if</span>(<span class="hljs-number">2</span>*t[pos&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>].mx&gt;v) <span class="hljs-keyword">return</span> query(pos&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>,v);<br>    <span class="hljs-keyword">return</span> query(pos&lt;&lt;<span class="hljs-number">1</span>,v);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">ask</span><span class="hljs-params">(<span class="hljs-keyword">int</span> pos,<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(x&lt;=t[pos].l&amp;&amp;t[pos].r&lt;=y) <span class="hljs-keyword">return</span> t[pos].sumv;<br>    pushdown(pos);<br>    <span class="hljs-keyword">int</span> mid=t[pos].l+t[pos].r&gt;&gt;<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span>(y&lt;=mid) <span class="hljs-keyword">return</span> ask(pos&lt;&lt;<span class="hljs-number">1</span>,x,y);<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(x&gt;mid) <span class="hljs-keyword">return</span> ask(pos&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>,x,y);<br>    <span class="hljs-keyword">return</span> ask(pos&lt;&lt;<span class="hljs-number">1</span>,x,y)+ask(pos&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>,x,y);<br>&#125;<br><span class="hljs-keyword">int</span> val[N];<br><span class="hljs-keyword">int</span> v1,v2;<br><span class="hljs-function"><span class="hljs-keyword">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//freopen(&quot;1.in&quot;,&quot;r&quot;,stdin);</span><br>    <span class="hljs-comment">//freopen(&quot;res&quot;,&quot;w&quot;,stdout);</span><br>    read(n),read(q);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;n;i++)<br>    &#123;<br>        <span class="hljs-keyword">int</span> x,y,z;read(x),read(y);read(z);<br>        v[x].push_back(<span class="hljs-built_in">make_pair</span>(y,z));v[y].push_back(<span class="hljs-built_in">make_pair</span>(x,z));<br>    &#125;<br>    dfs(<span class="hljs-number">1</span>,<span class="hljs-number">0</span>);redfs(<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">int</span> all=<span class="hljs-number">0</span>;<br>    build(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,n);<br>    <span class="hljs-keyword">while</span>(q--)<br>    &#123;<br>        <span class="hljs-keyword">int</span> x,y;read(x),read(y);all+=y;val[x]+=y;v1+=y;v2+=y*(dis[x]);<br>        <span class="hljs-keyword">while</span>(x!=<span class="hljs-number">0</span>)<br>        &#123;<br>            modify(<span class="hljs-number">1</span>,dfn[top[x]],dfn[x],y);<br>            x=fa[top[x]];<br>        &#125;<br>        <span class="hljs-keyword">int</span> pos=num[query(<span class="hljs-number">1</span>,all)],ans=<span class="hljs-number">0</span>;<br>        x=pos;<br>        <span class="hljs-keyword">while</span>(x!=<span class="hljs-number">0</span>)<br>        &#123;<br>            ans+=ask(<span class="hljs-number">1</span>,dfn[top[x]],dfn[x]);<br>            x=fa[top[x]];<br>        &#125;<br>        ans=v2+dis[pos]*v1<span class="hljs-number">-2</span>*ans;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>,ans);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>重链剖分</tag>
      
      <tag>重心性质</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>二项式反演</title>
    <link href="/2021/02/15/%E4%BA%8C%E9%A1%B9%E5%BC%8F%E5%8F%8D%E6%BC%94/"/>
    <url>/2021/02/15/%E4%BA%8C%E9%A1%B9%E5%BC%8F%E5%8F%8D%E6%BC%94/</url>
    
    <content type="html"><![CDATA[<p>鸽了好久的二项式反演。</p><p>反演本质上是给你一个数列 <span class="math inline">\(g\)</span> ，<span class="math inline">\(g_n=\sum\limits_{i=0}^{n}a_{n,i}f_i\)</span> 。</p><p>让你去求 <span class="math inline">\(f\)</span> 。</p><p>发现其实本质上是一个 行向量<span class="math inline">\(g\)</span>，等于另外一个行向量 <span class="math inline">\(f\)</span>，乘上系数矩阵。</p><p>反演的过程相当于求出了系数矩阵的逆矩阵。</p><p>二项式反演想说的是什么呢？ <span class="math display">\[g_n=\sum\limits_{i=0}^{n} (-1)^i\binom{n}{i}f_i\Leftrightarrow f_n=\sum\limits_{i=0}^{n} (-1)^i\binom{n}{i}g_i\]</span> 证明后说，当你发现这两个式子竟然如此相似的时候，你应该感到十分震惊对不对。</p><p>因为这个系数矩阵的逆矩阵竟然是他自己。 <span class="math display">\[g_n=\sum\limits_{i=0}^{n} (-1)^i\binom{n}{i}f_i\Leftrightarrow f_n=\sum\limits_{i=0}^{n} (-1)^i\binom{n}{i}g_i\\同时显然有 g_n=\sum\limits_{i=0}^{n}\binom{n}{i}f_i\Leftrightarrow f_n=\sum\limits_{i=0}^{n} (-1)^{n-i}\binom{n}{i}g_i\]</span></p><p>那先考虑证明。</p><ol type="1"><li><p>运用 <span class="math inline">\(EGF\)</span> 的知识，有： <span class="math display">\[\frac{g_n}{n!}=\sum_{i=1}^{n}\frac{1}{(n-1)!}\cdot\frac{f_i}{i!}\]</span> 上式显然是卷积形式，设 <span class="math inline">\(G\)</span> 是 <span class="math inline">\(g_n\)</span> 的生成函数 ，<span class="math inline">\(F\)</span> 是 <span class="math inline">\(f_n\)</span> 的生成函数。 <span class="math display">\[\begin{aligned}G&amp;=e^{x}\times F\\F&amp;=G\times e^{-x}\\[n]e^{-x}&amp;=\frac{(-1)^n}{n!}\\\frac{f_n}{n!}&amp;=\sum\limits_{i=0}^{n}\frac{(-1)^{n-i}}{(n-i)!}\cdot\frac{g_i}{i!}\\f_n&amp;=\sum\limits_{i=0}^{n}(-1)^{n-i}\binom{n}{i}g_i\end{aligned}\]</span></p></li><li><p>直接带入。 <span class="math display">\[\begin{aligned}f_n&amp;=\sum\limits_{i=0}^{n}(-1)^{n-i}\frac{n!}{i!\times (n-i)!}\sum_{j=0}^{i}\frac{i!}{j!\times(i-j)!}f_j\\f_n&amp;=\sum_{j=0}^{n}\frac{n!}{j!}\sum_{i=j}^{n}(-1)^{n-i}\frac{f_j}{(n-i)!(i-j)!}\\f_n&amp;=\sum_{j=0}^{n}\frac{n!}{j!}f_j\sum_{i=0}^{n-j}(-1)^i\frac{1}{i!((n-j)-i)!}\\f_n&amp;=\sum_{j=0}^{n}\binom{n}{j}f_j\sum_{i=0}^{n-j}(-1)^i\binom{n-j}{i}\\f_n&amp;=\sum_{j=0}^{n}\binom{n}{j}f_j(1-1)^{n-j}\\\end{aligned}\]</span> 显然只有当 <span class="math inline">\(n=j\)</span> 时，后面的系数才不是 <span class="math inline">\(0\)</span>。</p><p>也就是 <span class="math inline">\(f_n=\sum\limits_{j=n}^{n}\binom{n}{j}f_j\)</span> ,也就是 <span class="math inline">\(f_n=f_n\)</span>。</p></li></ol><p><del>你知道二项式反演的四种写法吗？</del></p><p>有 ： <span class="math display">\[g_n=\sum_{i=n}^{}(-1)^i\binom{i}{n}f_i\Leftrightarrow f_n=\sum_{i=n}^{}(-1)^i\binom{i}{n}g_i\]</span> 这个证明可以由初始系数矩阵，翻转行列证明。由于初始的矩阵的逆矩阵等于本身，性质比较好。</p><p>可以说明初始矩阵的转置的逆矩阵也是该矩阵的转置。</p><p><span class="math inline">\(A=A^{-1}\Leftrightarrow A^T={A^T}^{-1}\)</span></p><p>所以我们现在有4种二项式反演形式。 <span class="math display">\[\begin{aligned}g_n=\sum\limits_{i=0}^{n} (-1)^i\binom{n}{i}f_i&amp;\Leftrightarrow f_n=\sum\limits_{i=0}^{n} (-1)^i\binom{n}{i}g_i\\g_n=\sum\limits_{i=0}^{n}\binom{n}{i}f_i&amp;\Leftrightarrow f_n=\sum\limits_{i=0}^{n} (-1)^{n-i}\binom{n}{i}g_i\\g_n=\sum_{i=n}^{}(-1)^i\binom{i}{n}f_i&amp;\Leftrightarrow f_n=\sum_{i=n}^{}(-1)^i\binom{i}{n}g_i\\g_n=\sum_{i=n}^{}\binom{i}{n}f_i&amp;\Leftrightarrow f_n=\sum_{i=n}^{}(-1)^{i-n}\binom{i}{n}g_i\end{aligned}\]</span> 例题</p><p><a href="https://www.luogu.com.cn/problem/P4859">已经没有什么好害怕的了</a></p><p><a href="https://www.luogu.com.cn/problem/CF285E">Positions in Permutations</a></p><p>[<a href="https://www.luogu.com.cn/problem/P5401">CTS2019]珍珠</a></p>]]></content>
    
    
    <categories>
      
      <category>数学</category>
      
    </categories>
    
    
    <tags>
      
      <tag>组合数学</tag>
      
      <tag>数论</tag>
      
      <tag>二项式反演</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JLOI2015 骗我呢</title>
    <link href="/2021/02/15/JLOI2015/"/>
    <url>/2021/02/15/JLOI2015/</url>
    
    <content type="html"><![CDATA[<p>把大小关系看成一条边。</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/5ld2ucd2.png" /></p><p>发现，最长的路径，就是从 <span class="math inline">\((1,x)\rightarrow(n,y)\)</span> 的这样长度为 <span class="math inline">\(m\)</span> 的路径。</p><p>现在一共有 <span class="math inline">\(m+1\)</span> 种不同数值，所以每条路径只会有 <span class="math inline">\(1\)</span> 处可以选择比正常大 <span class="math inline">\(1\)</span> 的数值。</p><p>所以假如要选某一个点作为 <span class="math inline">\(+1\)</span> 的点，此时，他左上的的点都不能选。</p><p>所以可以有以下爆搜的代码。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">int</span> n,m,ans;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> down)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(x==n+<span class="hljs-number">1</span>) &#123;ans++;<span class="hljs-keyword">return</span> ;&#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=down;i&lt;=m;i++) dfs(x+<span class="hljs-number">1</span>,i);<br>    dfs(x+<span class="hljs-number">1</span>,max(down<span class="hljs-number">-1</span>,<span class="hljs-number">1</span>));<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">cin</span>&gt;&gt;n&gt;&gt;m;<br>    dfs(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>);<br>    <span class="hljs-built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="hljs-built_in">endl</span>;<br>&#125;<br></code></pre></td></tr></table></figure><hr /><p>发现这个选的状态可以理解成走格子。</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/6yvatxj4.png" /></p><p>假如上次选的是红色节点，那么红色圈起来的就是可选。</p><p>可以选的状态，相当于每次向右下走，接下来向上走能到的节点状态。</p><p>那么可以用一条只往 右下，上，走的路径，代表一种状态。</p><p>这个代表是双射，证明比较显然。</p><p>任何一种状态可以用一条路径表示，这个显然。</p><p>一条路径，可以代表一种状态，就是看那一步是向右下走。</p><p><span class="math inline">\(tips\)</span></p><p>注意这个最下一排，我们要新建一排 虚点使其可以转移。</p><p>为了统计最后一列的和，可以新建一排虚点，然后把路径个数和转成到点 <span class="math inline">\((n+1,m+1)\)</span> 的路径个数。</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/yit8z40d.png" /></p><p>统计路径大概的 <span class="math inline">\(dp\)</span></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">int</span> n,m,ans;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> int long long</span><br><span class="hljs-keyword">int</span> dp[<span class="hljs-number">1000</span>][<span class="hljs-number">1000</span>];<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> mod=<span class="hljs-number">1e9</span>+<span class="hljs-number">7</span>;<br><span class="hljs-function"><span class="hljs-keyword">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">cin</span>&gt;&gt;n&gt;&gt;m;<br>    dp[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=m+<span class="hljs-number">1</span>;i++) dp[<span class="hljs-number">1</span>][i]=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">2</span>;i&lt;=n;i++)<br>    &#123;<br>        dp[i][<span class="hljs-number">0</span>]=dp[i<span class="hljs-number">-1</span>][<span class="hljs-number">1</span>];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">1</span>;j&lt;=m+<span class="hljs-number">1</span>;j++) dp[i][j]=dp[i<span class="hljs-number">-1</span>][j+<span class="hljs-number">1</span>]+dp[i][j<span class="hljs-number">-1</span>], dp[i][j]%=mod;<br>    &#125;<br>    <span class="hljs-keyword">int</span> ans=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=m+<span class="hljs-number">1</span>;i++) ans+=dp[n][i],ans%=mod;<br>    <span class="hljs-built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="hljs-built_in">endl</span>;<br>&#125;<br></code></pre></td></tr></table></figure><hr /><p>把这个斜着的图“转正”。</p><p>本质上相当于是一个矩形，有两条线限制，不能经过这两条线的点。</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/p5p81po3.png" /></p><p>如果只有一条线限制，可以用折线法，构造双射。</p><p>如果我们对于每一条线折一次线，会用重复，比如说，我们假设经过 第一条线叫做 <span class="math inline">\(A\)</span> ，经过第二条线叫做 <span class="math inline">\(B\)</span>。注意，假如连续经过<span class="math inline">\(A\ or \ B\)</span> ，我们只算一次。</p><p>那么 <span class="math inline">\(AB\)</span> 。会被 <span class="math inline">\(A\)</span> 算一遍 ，<span class="math inline">\(B\)</span> 算一遍。</p><p>这时我们要减去 <span class="math inline">\(AB,BA\)</span> 。此时还会有类似问题 。于是考虑容斥，这个类似前缀容斥。</p><p>即对 <span class="math inline">\(ABAB\cdots\)</span> 这种串进行容斥。</p><p><span class="math inline">\(tips\)</span></p><p>具体就是每次把一条直线根据另一条直线对称，然后把终点关于“对称后”这条新直线，再次对称。</p><p>由于每次问题都可以化归成经过两条直线的路径数，而且直线斜率均为 <span class="math inline">\(1\)</span>，我们可以只维护截距，这样很好计算对称后的坐标，新的截距等你所维护的东西。</p><p>折线法代码。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">int</span> n,m;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> int long long</span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> mod=<span class="hljs-number">1e9</span>+<span class="hljs-number">7</span>,N=<span class="hljs-number">3e6</span>+<span class="hljs-number">10</span>;;<br><span class="hljs-keyword">int</span> f[N],finv[N];<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">qpow</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a,<span class="hljs-keyword">int</span> b)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> k=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(b)&#123;<span class="hljs-keyword">if</span>(b&amp;<span class="hljs-number">1</span>) k=k*a%mod;a=a*a%mod,b&gt;&gt;=<span class="hljs-number">1</span>;&#125;<br>    <span class="hljs-keyword">return</span> k;<br>&#125;<br>inline pair&lt;int,int&gt; ref(int x,int y,int d)&#123;return make_pair(y-d,x+y-(y-d));&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">reflect</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a,<span class="hljs-keyword">int</span> b)</span></span>&#123;<span class="hljs-keyword">return</span> a+a-b;&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">comb</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n,<span class="hljs-keyword">int</span> m)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(n&lt;<span class="hljs-number">0</span>||m&lt;<span class="hljs-number">0</span>||n&lt;m) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">return</span> f[n]*finv[n-m]%mod*finv[m]%mod;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">cin</span>&gt;&gt;n&gt;&gt;m;n++,m+=<span class="hljs-number">2</span>;<br>    f[<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;finv[<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n+n+m;i++) f[i]=f[i<span class="hljs-number">-1</span>]*i%mod;<br>    finv[n+n+m]=qpow(f[n+n+m],mod<span class="hljs-number">-2</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=n+n+m<span class="hljs-number">-1</span>;i&gt;=<span class="hljs-number">1</span>;i--) finv[i]=finv[i+<span class="hljs-number">1</span>]*(i+<span class="hljs-number">1</span>)%mod;<br>    <span class="hljs-keyword">int</span> x,y,a,b,ans=<span class="hljs-number">0</span>;<br>    x=n<span class="hljs-number">-1</span>,y=n+m<span class="hljs-number">-1</span><span class="hljs-number">-1</span>;a=<span class="hljs-number">-1</span>,b=m;<br>    ans=comb(x+y,x);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">1</span>;j&lt;=<span class="hljs-number">2</span>;j++)<br>    &#123;<br>        x=n<span class="hljs-number">-1</span>,y=n+m<span class="hljs-number">-1</span><span class="hljs-number">-1</span>;a=m,b=<span class="hljs-number">-1</span>;<br>        <span class="hljs-keyword">if</span>(j==<span class="hljs-number">2</span>) swap(a,b);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n+n+m;i++)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(i==<span class="hljs-number">1</span>)<br>            &#123;<br>                <span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span>&gt;pot=ref(x,y,a);x=pot.first,y=pot.second;<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                <span class="hljs-keyword">if</span>(i&amp;<span class="hljs-number">1</span>)<br>                &#123;<br>                    a=reflect(b,a);<span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span>&gt;pot=ref(x,y,a);<br>                    x=pot.first,y=pot.second;<br>                &#125;<br>                <span class="hljs-keyword">else</span><br>                &#123;<br>                    b=reflect(a,b);<span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span>&gt;pot=ref(x,y,b);<br>                    x=pot.first,y=pot.second;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(i&amp;<span class="hljs-number">1</span>) <br>            &#123;<br>                ans-=comb(x+y,x);<br>                <span class="hljs-keyword">if</span>(ans&lt;<span class="hljs-number">0</span>) ans+=mod;<br>            &#125;<br>            <span class="hljs-keyword">else</span> <br>            &#123;<br>                ans+=comb(x+y,x);<br>                <span class="hljs-keyword">if</span>(ans&gt;=mod) ans-=mod;<br>            &#125;<br>        <br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">cout</span>&lt;&lt;ans;<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">23 233</span><br><span class="hljs-comment">938980383</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数学</category>
      
    </categories>
    
    
    <tags>
      
      <tag>组合数学</tag>
      
      <tag>折线法</tag>
      
      <tag>idea题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>wc2021 t3 fib</title>
    <link href="/2021/02/14/wc2021-t3-fib/"/>
    <url>/2021/02/14/wc2021-t3-fib/</url>
    
    <content type="html"><![CDATA[<p>wc 2021 的 T3。</p><span id="more"></span><p>今天有点晚了，写一下这个题的大体思路。</p><p>首先由题意： <span class="math display">\[F_n=F_{n-1}+F_{n-2},F_0=a,F_{1}=b\]</span> 记录斐波那契数列为 <span class="math inline">\(f_i,f_0=0\)</span> ，特殊定义 <span class="math inline">\(f_{-1}=1\)</span>。 <span class="math display">\[有\ F_n=a\cdot f_{n-1}+b\cdot f_{n}\]</span> 问题转换成 给你 <span class="math inline">\(a,b\)</span>,让你求使得 <span class="math inline">\(a\cdot f_{n-1}+b\cdot f_{n}\equiv 0\pmod{m}\)</span> 最小的 <span class="math inline">\(n\)</span>。</p><ol type="1"><li><p>首先，当 <span class="math inline">\(m\)</span> 为质数的时候很好做，因为 <span class="math inline">\(a,b,f_n,f_{n-1}\)</span> 的逆元都存在，可以直接移项，做除法。</p></li><li><p>其次由于斐波那契在 <span class="math inline">\(\bmod m\)</span> 的情况下是纯循环的（暂时不会证明），假如 <span class="math inline">\(m=\prod p_i\)</span> ，我们也是也已轻松合并的。</p></li><li><p>但是并不是所有的 <span class="math inline">\(m\)</span> 都可以分解成一堆会不相同的素数积，考虑 <span class="math inline">\(m=\prod p_i^{\alpha_i}\)</span>，合并似乎还是很好合并。（本质上就是求一堆同余方程组的最小解），问题转化为解决 <span class="math inline">\(m=p^{\alpha}\)</span> 的问题。</p></li><li><p><span class="math inline">\(update\)</span> 我想了一下，发现合并并不显然，这里可能是最重要的一步，</p></li></ol><p>假设现在我们有一个对于 <span class="math inline">\(F_x \bmod p^\alpha=0\)</span> 的最小解，而他的循环节可能并不是斐波那契 <span class="math inline">\(f_x \bmod p^\alpha=0\)</span> 的循环节。</p><p>有结论 <span class="math inline">\(F_x \bmod p^\alpha=0\)</span> 的循环节，肯定是 <span class="math inline">\(f_x \bmod p^\alpha=0\)</span> 的循环节的因数。</p><p>证明：</p><ol type="1"><li><p>显然 <span class="math inline">\(f_x\bmod p^\alpha =0\)</span> 的循环节肯定是 <span class="math inline">\(F_x\bmod p^\alpha=0\)</span> 的循环节，根据 <span class="math inline">\(F_n\)</span> 表达式可知。</p></li><li><p>设 <span class="math inline">\(F_x\bmod p^\alpha=0\)</span> 最小解为 <span class="math inline">\(x_1\)</span>，第二小解为 <span class="math inline">\(x_2\)</span> 。</p><p>那么有结论 <span class="math inline">\(x2-x1\)</span> 是一个循环节，证明可能比较感性。</p><p>当前 <span class="math inline">\(F_x\)</span> 数列长得样子应该是： <span class="math display">\[\cdots,-k,0,k,k,2k,\cdots,f_i\times k,\cdots,-t,0,t,2t,\cdots\]</span> 就是 <span class="math inline">\(0\equiv f_i\times k\pmod{p^\alpha}\)</span>,有两种可能 <span class="math inline">\(p^\alpha\mid f_i\)</span>, <span class="math inline">\(p^\beta\mid k,p^{\alpha-\beta}\mid f_i\)</span> 。</p><p>第一种可能证明显然，第二种可能因为有 <span class="math inline">\(t\)</span> 是数倍的 <span class="math inline">\(k\)</span> ，那么显然也有 <span class="math inline">\(p^\beta\mid t\)</span> ,接下来的证明显然。</p></li><li><p>如果这个新循环节不是 <span class="math inline">\(f_x\bmod p^\alpha=0\)</span> 的循环节，那可以根据类似上面的证明，证明出 <span class="math inline">\((l_1,l_2)\)</span> 也是一个循环节，<span class="math inline">\(l_1,l_2\)</span> 分别为之前的两个循环节（新循环节，和斐波那契自带的循环节）。 <span class="math inline">\((l_1,l_2)\)</span> 显然也是 <span class="math inline">\(l_2\)</span> 的一个因数。</p></li></ol><p>如是我们为了找到解的循环节可以去找斐波那契循环节的因数，然后判断该长度是否为循环节。这样一定可以找到最小的循环节。</p><p><span class="math inline">\(10^5\)</span> 范围内数的因子 <span class="math inline">\(\leq 128\)</span> 此处暴力即可。</p><ol start="5" type="1"><li>由于 <span class="math inline">\(m=p^{\alpha}\)</span> ,逆元可能不存在，按照基本套路，我们使用乘法方程，并且提取每一个数的 <span class="math inline">\(p\)</span> 因子</li></ol><p>为了之后表达方便，令 <span class="math inline">\(a&#39;,b&#39;\)</span> 表示现在的 <span class="math inline">\(a,b\)</span>。 <span class="math display">\[   a&#39;=a\cdot p^{A}\ ,\ b&#39;=b\cdot p^{B}\ ,\ f_{n-1}=c\cdot p^{C}\ ,\ f_{n}=d\cdot p^D\ ( \ a,b,c,d\perp p)   \]</span> 原方程化为： <span class="math display">\[   a\times p^A\cdot c\times p^C+b\times p^B\cdot d\times p^D\equiv 0\pmod{p^\alpha}   \]</span></p><p><span class="math display">\[   (ac)\times p^{A+C}+(bd)\times p^{B+D}\equiv 0\pmod{p^\alpha}   \]</span></p><p>这个方程成立有两种情况：</p><ol type="1"><li><span class="math inline">\(A+C\ge \alpha\)</span>,<span class="math inline">\(B+D\ge \alpha\)</span>。</li><li><span class="math inline">\(ac\equiv bd\pmod{p^{\alpha-(A+C)}}\)</span>，且 <span class="math inline">\(A+C=B+D\)</span></li></ol><p>成立条件：</p><ol type="1"><li><p>在线处理 <span class="math inline">\(C\ge \alpha-A,D\ge \alpha-B\)</span> 相当于二维数点（可能会有简单方法？）（由于 <span class="math inline">\(A,B,C,D\)</span> 都很小直接暴力就行）。</p></li><li><p>显然等价: <span class="math display">\[\frac{a}{b}\equiv \frac{d}{c}\pmod{p^{\alpha-(A+C)}},A-B=D-C\]</span></p></li><li><p>预处理 ，对每一个 <span class="math inline">\(m\)</span> 的质因数 <span class="math inline">\(p_i\)</span>，首先处理出成立条件 <span class="math inline">\(1\)</span> 成立的答案。其次考虑成立条件 <span class="math inline">\(2\)</span> ,预处理的过程此时我们知道 <span class="math inline">\(C,c,D,d,\alpha\)</span> ，不知道 <span class="math inline">\(A,a,B,b\)</span> 。发现 <span class="math inline">\(A\leq \log_{p}^{m}\)</span> , 即<span class="math inline">\(A\)</span> 的值域很小 ，此时暴力枚举 <span class="math inline">\(A\)</span> ，此时可以计算出 <span class="math inline">\(B\)</span> 的取值，从而可以处理出 <span class="math inline">\(\frac{d}{c}\bmod p^{\alpha-(A+C)}\)</span>,将其存进表。</p></li></ol><p>不难发现，此处复杂度为枚举 <span class="math inline">\(A\)</span> 的复杂度，即 <span class="math inline">\(\mathcal{O(\sum\limits _{i=1}^{k}p_i^{\alpha_i}\alpha_i)}\)</span>或者<span class="math inline">\(\mathcal{O(\sum\limits _{i=1}^{k}p_i^{\alpha_i}\alpha_i^2)}\)</span> 。(看你成立条件 <span class="math inline">\(1\)</span> 的具体处理方法)。</p><p>询问时候，对于每个 <span class="math inline">\(m\)</span> 的质因数 <span class="math inline">\(p_i\)</span> ，我们可以枚举 <span class="math inline">\(C\)</span> 然后，可以算出 <span class="math inline">\(\frac{a}{b} \bmod {p^{\alpha-(A+C)}}\)</span> 的值，暴力查表，找到一组特解。</p><p>不难发现，此处的复杂度为枚举 <span class="math inline">\(C\)</span> 的复杂度，和寻找循环节的复杂度，即 <span class="math inline">\(\mathcal{O(\sum\limits_{i=1}^{k}d(3p_i^{\alpha_i})+\sum \limits _{i=1}^k\alpha_i)}\)</span>。</p><p>代码写的可能比较丑。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;tr1/unordered_map&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> int long long</span><br><span class="hljs-keyword">int</span> T,m;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">read</span><span class="hljs-params">(<span class="hljs-keyword">int</span> &amp;x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">char</span> c=getchar();x=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(c&gt;<span class="hljs-string">&#x27;9&#x27;</span>||c&lt;<span class="hljs-string">&#x27;0&#x27;</span>) c=getchar();<br>    <span class="hljs-keyword">while</span>(c&lt;=<span class="hljs-string">&#x27;9&#x27;</span>&amp;&amp;c&gt;=<span class="hljs-string">&#x27;0&#x27;</span>) x=(x&lt;&lt;<span class="hljs-number">1</span>)+(x&lt;&lt;<span class="hljs-number">3</span>)+c-<span class="hljs-string">&#x27;0&#x27;</span>,c=getchar();<br>&#125;<br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; divs[<span class="hljs-number">300010</span>];<br><span class="hljs-keyword">int</span> p[<span class="hljs-number">10</span>],k[<span class="hljs-number">10</span>],t[<span class="hljs-number">10</span>],loop[<span class="hljs-number">10</span>];<br><span class="hljs-keyword">int</span> f[<span class="hljs-number">10</span>][<span class="hljs-number">300010</span>];<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">gcd</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a,<span class="hljs-keyword">int</span> b)</span></span>&#123;<span class="hljs-keyword">if</span>(b==<span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> a;<span class="hljs-keyword">return</span> gcd(b,a%b);&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">qpow</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a,<span class="hljs-keyword">int</span> b,<span class="hljs-keyword">int</span> p)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> k=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(b)&#123;<span class="hljs-keyword">if</span>(b&amp;<span class="hljs-number">1</span>) k=k*a%p;a=a*a%p,b=b&gt;&gt;<span class="hljs-number">1</span>;&#125;<span class="hljs-keyword">return</span> k;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">ppow</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a,<span class="hljs-keyword">int</span> b)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> k=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(b)&#123;<span class="hljs-keyword">if</span>(b&amp;<span class="hljs-number">1</span>) k=k*a;a=a*a,b=b&gt;&gt;<span class="hljs-number">1</span>;&#125;<span class="hljs-keyword">return</span> k;<br>&#125;<br><span class="hljs-keyword">namespace</span> Inv<br>&#123;<br>    <span class="hljs-keyword">int</span> phi[<span class="hljs-number">100010</span>],pr[<span class="hljs-number">100010</span>],p[<span class="hljs-number">100010</span>],tot=<span class="hljs-number">0</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">2</span>;i&lt;=<span class="hljs-number">100000</span>;i++)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(pr[i]==<span class="hljs-number">0</span>) p[++tot]=i,phi[i]=i<span class="hljs-number">-1</span>;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">1</span>;j&lt;=tot&amp;&amp;p[j]*i&lt;=<span class="hljs-number">100000</span>;j++)<br>            &#123;<br>                pr[i*p[j]]=<span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">if</span>(i%p[j]==<span class="hljs-number">0</span>)<br>                &#123;<br>                    phi[i*p[j]]=p[j]*phi[i];<span class="hljs-keyword">break</span>;<br>                &#125;<br>                phi[i*p[j]]=(p[j]<span class="hljs-number">-1</span>)*phi[i];<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">inv</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> m)</span></span>&#123;<span class="hljs-keyword">return</span> qpow(x,phi[m]<span class="hljs-number">-1</span>,m);&#125;<br>&#125;<br><br>inline pair&lt;int,int&gt; nump(int x,int p,int ki)<br>&#123;<br>    <span class="hljs-keyword">int</span> k=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span>(x==<span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-built_in">make_pair</span>(ki,<span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">while</span>(x%p==<span class="hljs-number">0</span>) k++,x/=p;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">make_pair</span>(min(k,ki),x);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">exgcd</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a,<span class="hljs-keyword">int</span> b,<span class="hljs-keyword">int</span> &amp;x,<span class="hljs-keyword">int</span> &amp;y)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(b==<span class="hljs-number">0</span>)&#123;x=<span class="hljs-number">1</span>,y=<span class="hljs-number">0</span>;<span class="hljs-keyword">return</span> ;&#125;<br>    exgcd(b,a%b,y,x); y-=(a/b)*x;<br>&#125;<br><span class="hljs-keyword">int</span> can[<span class="hljs-number">10</span>][<span class="hljs-number">20</span>][<span class="hljs-number">20</span>];<br>tr1::<span class="hljs-built_in">unordered_map</span>&lt;<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span>&gt; z[<span class="hljs-number">10</span>][<span class="hljs-number">20</span>][<span class="hljs-number">20</span>][<span class="hljs-number">40</span>];<br><span class="hljs-function"><span class="hljs-keyword">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    Inv::init();<br>    read(T),read(m);<br>    <span class="hljs-keyword">int</span> mm=m;<br>    <span class="hljs-keyword">int</span> tot=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">2</span>;i*i&lt;=m;i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(m%i==<span class="hljs-number">0</span>)<br>        &#123;<br>            p[++tot]=i;t[tot]=<span class="hljs-number">1</span>;k[tot]=<span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">while</span>(m%i==<span class="hljs-number">0</span>) m/=i,t[tot]*=i,k[tot]++;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">int</span> MAXX=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span>(m&gt;<span class="hljs-number">1</span>) p[++tot]=m,t[tot]=m,k[tot]=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=tot;i++)<br>    &#123;<br>        f[i][<span class="hljs-number">0</span>]=<span class="hljs-number">0</span>;f[i][<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">2</span>;j&lt;=<span class="hljs-number">6</span>*t[i];j++)<br>        &#123;<br>            <br>            f[i][j]=(f[i][j<span class="hljs-number">-1</span>]+f[i][j<span class="hljs-number">-2</span>])%t[i]; <br>            <span class="hljs-keyword">if</span>(f[i][j<span class="hljs-number">-1</span>]==<span class="hljs-number">0</span>&amp;&amp;f[i][j]==<span class="hljs-number">1</span>)<br>            &#123;<br>                loop[i]=j<span class="hljs-number">-1</span>; <span class="hljs-comment">// 0-&gt; loop -&gt; 2loop ...and so on </span><br>                MAXX=max(MAXX,loop[i]);<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span>&gt; vc=nump(f[i][j<span class="hljs-number">-1</span>],p[i],k[i]),vd=nump(f[i][j],p[i],k[i]);<br>            <span class="hljs-keyword">int</span> C=vc.first,c=vc.second,D=vd.first,d=vd.second;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> a=max(<span class="hljs-number">0ll</span>,k[i]-C);a&lt;=k[i];a++) <br>                <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> b=max(<span class="hljs-number">0ll</span>,k[i]-D);b&lt;=k[i];b++) can[i][a][b]=j;<br>            <span class="hljs-keyword">int</span> tmp=ppow(p[i],k[i]-C);<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> A=<span class="hljs-number">0</span>;A+C&lt;k[i];A++)<br>            &#123;<br>                <span class="hljs-keyword">int</span> res=d*Inv::inv(c,tmp)%tmp;<br>                <span class="hljs-keyword">if</span>(z[i][A][D-C+k[i]][C].count(res)==<span class="hljs-number">0</span>)<br>                z[i][A][D-C+k[i]][C][res]=j;<br>                tmp/=p[i];<br>            &#125;<span class="hljs-comment">// z : p_i , A -&gt; D-C  -&gt; d/c</span><br>        &#125; <br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">2</span>;j&lt;=loop[i]*<span class="hljs-number">2</span>;j++) f[i][j]=(f[i][j<span class="hljs-number">-1</span>]+f[i][j<span class="hljs-number">-2</span>])%t[i];<br>    &#125;<br>    <span class="hljs-comment">/////////////////</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=MAXX;i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">1</span>;j*i&lt;=MAXX;j++) divs[i*j].push_back(i);<br>    &#125;<br>    m=mm;<br>    <span class="hljs-keyword">int</span> a0=<span class="hljs-number">0</span>,m0=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(T--)<br>    &#123;<br>        <span class="hljs-keyword">int</span> a,b,aa,bb,A,B;<br>        read(aa),read(bb);<br>        aa%=m,bb%=m;<br>        <span class="hljs-keyword">if</span>(aa==<span class="hljs-number">0</span>) &#123;<span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-number">0</span>&lt;&lt;<span class="hljs-built_in">endl</span>;;<span class="hljs-keyword">continue</span>;&#125;<br>        <span class="hljs-keyword">if</span>(bb==<span class="hljs-number">0</span>) &#123;<span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-number">1</span>&lt;&lt;<span class="hljs-built_in">endl</span>;<span class="hljs-keyword">continue</span>;&#125;<br>        a0=<span class="hljs-number">0</span>,m0=<span class="hljs-number">1</span>;<span class="hljs-keyword">bool</span> FLG=<span class="hljs-number">0</span>,fag=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=tot;i++)<br>        &#123;<br>            <span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span>&gt; va=nump(aa,p[i],k[i]),vb=nump(bb,p[i],k[i]);<br>            a=va.second,A=va.first;<br>            b=vb.second,B=vb.first;<br>            <span class="hljs-keyword">int</span> ans=<span class="hljs-number">-1</span>,tmp;<br>            <span class="hljs-keyword">if</span>(aa%t[i]==<span class="hljs-number">0</span>) &#123;ans=<span class="hljs-number">0</span>;<span class="hljs-keyword">goto</span> chk;&#125;<br>            <span class="hljs-keyword">if</span>(bb%t[i]==<span class="hljs-number">0</span>) &#123;ans=<span class="hljs-number">1</span>;<span class="hljs-keyword">goto</span> chk;&#125;<br>            <span class="hljs-keyword">if</span>(can[i][A][B]!=<span class="hljs-number">0</span>) &#123;ans=can[i][A][B];<span class="hljs-keyword">goto</span> chk;&#125;<br>            <span class="hljs-keyword">if</span>((a*f[i][<span class="hljs-number">0</span>]+b*f[i][<span class="hljs-number">1</span>])%t[i]==<span class="hljs-number">0</span>)&#123;ans=<span class="hljs-number">1</span>;<span class="hljs-keyword">goto</span> chk;&#125;<br>            tmp=ppow(p[i],k[i]-A);<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> C=<span class="hljs-number">0</span>;A+C&lt;k[i];C++)<br>            &#123;<br>                <span class="hljs-keyword">int</span> res=a*Inv::inv(b,tmp)%tmp;<br>                res=-res+tmp+tmp;<br>                res%=tmp;<br>                <span class="hljs-keyword">if</span>(z[i][A][A-B+k[i]][C].count(res))<br>                &#123;<br>                    ans=z[i][A][A-B+k[i]][C][res];<br>                    <span class="hljs-keyword">goto</span> chk;<br>                &#125;<br>                tmp/=p[i];<br>            &#125;<br>            chk:;<br>            ans%=loop[i];<br>            <span class="hljs-keyword">if</span>(ans==<span class="hljs-number">-1</span>) &#123;<br>                FLG=<span class="hljs-number">1</span>;<br>                <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-number">-1</span>&lt;&lt;<span class="hljs-built_in">endl</span>;<span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-keyword">int</span> M=<span class="hljs-number">0</span>,A=ans;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> x:divs[loop[i]])<br>            &#123;<br>                <span class="hljs-keyword">if</span>((aa*f[i][x+ans<span class="hljs-number">-1</span>]+bb*f[i][x+ans])%t[i]==<span class="hljs-number">0</span>) <br>                &#123;<br>                    M=x;<span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>            <span class="hljs-comment">/////////////////////////////////////</span><br>            <span class="hljs-keyword">int</span> g=gcd(M,m0);<br>            <span class="hljs-keyword">if</span>(<span class="hljs-built_in">abs</span>(A-a0)%g!=<span class="hljs-number">0</span>)&#123;<br>                fag=<span class="hljs-number">1</span>;<span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-number">-1</span>&lt;&lt;<span class="hljs-built_in">endl</span>;<span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-keyword">int</span> x,y;<br>            exgcd(m0/g,M/g,x,y);<br>            x%=(M/g),x+=(M/g),x%=(M/g);<br>            <span class="hljs-keyword">int</span> MM=m0;<br>            m0=m0/g*M;x=x*((A-a0)/g)%m0+m0;x%=m0;<br>            a0=x%m0*MM%m0+a0;a0%=m0;<br>            a0+=m0;a0%=m0;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(FLG==<span class="hljs-number">1</span>||fag==<span class="hljs-number">1</span>) <span class="hljs-keyword">continue</span>;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>,a0);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数学</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数论</tag>
      
      <tag>fib循环节</tag>
      
      <tag>人类智慧题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>点分治</title>
    <link href="/2021/02/13/point-divide/"/>
    <url>/2021/02/13/point-divide/</url>
    
    <content type="html"><![CDATA[<p>点分治 &amp; 点分树 的一些理解。</p><span id="more"></span><h2 id="点分治">点分治</h2><h3 id="什么是点分治">什么是点分治</h3><p>点分治，是树分治的一种。</p><p>树分治包括了点分治，边分治，链分治。</p><p>点分治主要处理两点间路径信息的问题。</p><h3 id="点分治怎么用">点分治怎么用</h3><p>拿最基本的<a href="https://www.luogu.com.cn/problem/P3806">问题</a>入手，给你一棵树，让你统计树上距离为 <span class="math inline">\(k\)</span> 的点对个数。</p><p>形式的说 <span class="math inline">\(\sum\limits_{i=1}^{n}\sum\limits_{j=1}^{n}[dist(i,j)=k]\)</span>。</p><h4 id="naive-sol1"><span class="math inline">\(naive\ sol1\)</span></h4><p>当我们知道一个端点 <span class="math inline">\(i\)</span> 的时候，我们可以 <span class="math inline">\(\mathcal{O(n)}\)</span> 的求出该点的贡献，每个点都 <span class="math inline">\(\mathcal{O(n)}\)</span> 计算，总复杂度<span class="math inline">\(\mathcal{O(n^2)}\)</span>。</p><h4 id="naive-sol2"><span class="math inline">\(naive\ sol2\)</span></h4><p>考虑分治，随机选一个点 <span class="math inline">\(u\)</span> ，把点 <span class="math inline">\(u\)</span> 删掉，算出剩下的每个连通块的子问题和。同时把经过点 <span class="math inline">\(u\)</span> 的链的答案统计出来。</p><p>由于分治，复杂度为 <span class="math inline">\(\mathcal{O(dep\times n)}\)</span> ,<span class="math inline">\(dep\)</span> 为分治层数。</p><h4 id="right-sol"><span class="math inline">\(right\ sol\)</span></h4><p>发现让分治层数最小，本质上是让每次分治时产生的最大的连通块最小。因为此时分治层数可以看成最大的连通块变成 <span class="math inline">\(1\)</span> 的次数。</p><p>发现这个定义本质上就是找重心。在重心心处分治。</p><p>由于中心的性质，每一次分割后产生的最大的连通块 <span class="math inline">\(maxsz\leq\lceil\frac{sz}{2}\rceil\)</span></p><p>所以 <span class="math inline">\(dep\)</span> 一定是 <span class="math inline">\(O(\log_{2}n)\)</span> 级别的。</p><p>至于合并，也就一个 <span class="math inline">\(O(sz)\)</span> 解决的问题。</p><hr /><h2 id="点分树">点分树</h2><h3 id="什么是点分树">什么是点分树</h3><p>假如当前重心为 <span class="math inline">\(u\)</span> 我们把删去 <span class="math inline">\(u\)</span> 之后产生的新重心 <span class="math inline">\(v_{1,2,\cdots,k}\)</span> 向 <span class="math inline">\(u\)</span> 连边。</p><p>不难发现最终形态是一棵树。</p><p>我们把这棵树称作点分树。</p><h3 id="点分树有什么用">点分树有什么用</h3><p>观察点分治，我们每次合并答案都只在该连通块的重心处合并该连通块内的贡献。</p><p>所以假如谈一个点 <span class="math inline">\(u\)</span> 的贡献，那么他只可能在 <span class="math inline">\(u\)</span> 点，使 <span class="math inline">\(u\)</span> 点单独成为连通块所删除的重心 <span class="math inline">\(v\)</span>，使 <span class="math inline">\(v\)</span> 点所在连通块被从一个大连通块剥离出来而删的重心 <span class="math inline">\(z\)</span>，and so on 。</p><p>发现产生贡献的重心，全都在 点分树中 <span class="math inline">\(u\)</span> 到根的路径上。</p><p>所以我们统计答案相当于在统计一条链，而这个链的长度是 <span class="math inline">\(\mathcal{O(\log_2n)}\)</span> 级别的。</p><p>所以我们可以通过点分树来维护一些更难于直接记录的信息，以及一些修改操作。</p><p>对于点分治，点分树，有一点需要注意。</p><p>为什么点分治是对的？原因就在于，通过在重心时对链的合并，本质上就已经完成枚举树上的每一条路径了。</p><p>所以点分治本质上和那个 <span class="math inline">\(\mathcal{O(n^2)}\)</span> 的暴力时一样在枚举路径的。</p><p>所以在看到有树上问题问路径的一些情况，不妨考虑一下点分治。</p><h2 id="练手推荐">练手推荐</h2><p><a href="https://www.luogu.com.cn/problem/P6329">震波</a></p><p><a href="https://www.luogu.com.cn/problem/P2056">捉迷藏</a></p><p><a href="https://www.luogu.com.cn/problem/P4115">Qtree4</a></p><p><a href="https://www.luogu.com.cn/problem/P3241">开店</a></p><p><a href="https://www.luogu.com.cn/problem/P2664">树上游戏</a></p><p>本人实力有限，都是模板题了/kk</p>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>点分树+点分治</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
