<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>基本数论</title>
    <link href="/2021/02/13/%E5%9F%BA%E6%9C%AC%E6%95%B0%E8%AE%BA/"/>
    <url>/2021/02/13/%E5%9F%BA%E6%9C%AC%E6%95%B0%E8%AE%BA/</url>
    
    <content type="html"><![CDATA[<p>说一下一些基本数论算法的实现和简洁证明。</p><a id="more"></a><ol type="1"><li><p><span class="math inline">\(exgcd\)</span></p><p>目的：求解方程 <span class="math inline">\(ax+by=(a,b)\)</span> 的一组特解。</p><p>做法：<del>由于他叫exgcd</del>，我们就按求 <span class="math inline">\(\gcd\)</span> 方法试一下。 <span class="math display">\[\begin{aligned}不妨设 (a,b)=1,a&gt;b\\a\cdot x+b\cdot y=&amp;1\\b\cdot y+(a\bmod b+\lfloor\frac{a}{b}\rfloor b)\cdot x=&amp;1\\提取b\\b\cdot(y+\lfloor \frac{a}{b}\rfloor x)+(a\bmod b)x=&amp;1\\问题化归，求解\ bx_1+(a\bmod b)y_1=&amp;1\\x=y1,y=x1-\lfloor\frac{a}{b}\rfloor x\end{aligned}\]</span> 为啥能求逆元？ <span class="math display">\[\begin{aligned}ax+by&amp;=1\\ax+by&amp;=1\pmod{b}\\ax&amp;=1\pmod{b}\end{aligned}\]</span> 显然 <span class="math inline">\(x\)</span> 是 <span class="math inline">\(a\)</span> 在 <span class="math inline">\(\bmod b\)</span> 意义下的逆元</p></li><li><p><span class="math inline">\(excrt\)</span></p><p>目的：合并若干线性同余方程组。 <span class="math display">\[\begin{cases}x\equiv a_1\pmod{p_1}\\x\equiv a_2\pmod{p_2}\\\ \ \ \ \vdots\\x\equiv a_n\pmod{p_n}\end{cases}\]</span> 问题本质等价，合并两个方程。</p><p><span class="math inline">\(x\equiv a_1\pmod{p_1},x\equiv a_2\pmod{p_2}\)</span></p><p>若存在解则解一定能表达成 <span class="math inline">\(x=x_0+k\cdot lcm(p_1,p_2)\)</span>,<span class="math inline">\(x_0\)</span> 是一个特解。</p><p>显然 <span class="math inline">\(p_1\mid lcm(p_1,p_2),p_2\mid lcm(p_1,p_2)\)</span>。</p><p>现在目的找到这样的一个特解 <span class="math inline">\(k\)</span>。 <span class="math display">\[k=k_1\cdot p_1+a_1,k=k_2\cdot p_2+a_2\Rightarrow k_1\cdot p_1+a_1=k_2\cdot p_2+b_2\\\Rightarrow k_1\cdot p_1-k_2\cdot p_2=b_2-b_1\]</span> 可以用 <span class="math inline">\(exgcd\)</span> 求一组 <span class="math inline">\(k_1,k_2\)</span> 特解。</p><p>·</p></li><li><p><span class="math inline">\(wait\ for \ updating\)</span></p></li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>wc2021 t3 fib</title>
    <link href="/2021/02/13/wc2021-t3-fib/"/>
    <url>/2021/02/13/wc2021-t3-fib/</url>
    
    <content type="html"><![CDATA[<p>wc 2021 的 T3。</p><a id="more"></a><p>今天有点晚了，写一下这个提的大体思路。</p><p>首先由题意： <span class="math display">\[F_n=F_{n-1}+F_{n-2},F_0=a,F_{1}=b\]</span> 记录斐波那契数列为 <span class="math inline">\(f_i,f_0=0\)</span> ，特殊定义 <span class="math inline">\(f_{-1}=1\)</span>。 <span class="math display">\[有\ F_n=a\cdot f_{n-1}+b\cdot f_{n}\]</span> 问题转换成 给你 <span class="math inline">\(a,b\)</span>,让你求使得 <span class="math inline">\(a\cdot f_{n-1}+b\cdot f_{n}\equiv 0\pmod{m}\)</span> 最小的 <span class="math inline">\(n\)</span>。</p><ol type="1"><li><p>首先，当 <span class="math inline">\(m\)</span> 为质数的时候很好做，因为 <span class="math inline">\(a,b,f_n,f_{n-1}\)</span> 的逆元都存在，可以直接移项，做除法。</p></li><li><p>其次由于斐波那契在 <span class="math inline">\(\bmod m\)</span> 的情况下是纯循环的（暂时不会证明），假如 <span class="math inline">\(m=\prod p_i\)</span> ，我们也是也已轻松合并的。</p></li><li><p>但是并不是所有的 <span class="math inline">\(m\)</span> 都可以分解成一堆会不相同的素数积，考虑 <span class="math inline">\(m=\prod p_i^{\alpha_i}\)</span>，合并似乎还是很好合并。（本质上就是求一堆同余方程组的最小解），问题转化为解决 <span class="math inline">\(m=p^{\alpha}\)</span> 的问题。</p></li><li><p><span class="math inline">\(update\)</span> 我想了一下，发现合并并不显然，这里可能是最重要的一步，</p></li></ol><p>假设现在我们有一个对于 <span class="math inline">\(F_x \bmod p^\alpha=0\)</span> 的最小解，而他的循环节可能并不是斐波那契 <span class="math inline">\(f_x \bmod p^\alpha=0\)</span> 的循环节。</p><p>有结论 <span class="math inline">\(F_x \bmod p^\alpha=0\)</span> 的循环节，肯定是 <span class="math inline">\(f_x \bmod p^\alpha=0\)</span> 的循环节的因数。</p><p>证明：</p><ol type="1"><li><p>显然 <span class="math inline">\(f_x\bmod p^\alpha =0\)</span> 的循环节肯定是 <span class="math inline">\(F_x\bmod p^\alpha=0\)</span> 的循环节，根据 <span class="math inline">\(F_n\)</span> 表达式可知。</p></li><li><p>设 <span class="math inline">\(F_x\bmod p^\alpha=0\)</span> 最小解为 <span class="math inline">\(x_1\)</span>，第二小解为 <span class="math inline">\(x_2\)</span> 。</p></li></ol><pre><code>  那么有结论 $x2-x1$ 是一个循环节，证明可能比较感性。  当前 $F_x$ 数列长得样子应该是：  $$  \cdots,-k,0,k,k,2k,\cdots,f_i\times k,\cdots,-t,0,t,2t,\cdots  $$  就是 $0\equiv f_i\times k\pmod&#123;p^\alpha&#125;$,有两种可能 $p^\alpha\mid f_i$,  $p^\beta\mid k,p^&#123;\alpha-\beta&#125;\mid f_i$ 。  第一种可能证明显然，第二种可能因为有 $t$ 是数倍的 $k$ ，那么显然也有 $p^\beta\mid t$ ,接下来的证明显然。</code></pre><ol start="3" type="1"><li>如果这个新循环节不是 <span class="math inline">\(f_x\bmod p^\alpha=0\)</span> 的循环节，那可以根据类似上面的证明，证明出 <span class="math inline">\((l_1,l_2)\)</span> 也是一个循环节，<span class="math inline">\(l_1,l_2\)</span> 分别为之前的两个循环节（新循环节，和斐波那契自带的循环节）。 <span class="math inline">\((l_1,l_2)\)</span> 显然也是 <span class="math inline">\(l_2\)</span> 的一个因数。</li></ol><p>如是我们为了找到解的循环节可以去找斐波那契循环节的因数，然后判断该长度是否为循环节。这样一定可以找到最小的循环节。</p><p><span class="math inline">\(10^5\)</span> 范围内数的因子 <span class="math inline">\(\leq 128\)</span> 此处暴力即可。</p><ol start="5" type="1"><li>由于 <span class="math inline">\(m=p^{\alpha}\)</span> ,逆元可能不存在，按照基本套路，我们使用乘法方程，并且提取每一个数的 <span class="math inline">\(p\)</span> 因子</li></ol><p>为了之后表达方便，令 <span class="math inline">\(a&#39;,b&#39;\)</span> 表示现在的 <span class="math inline">\(a,b\)</span>。 <span class="math display">\[   a&#39;=a\cdot p^{A}\ ,\ b&#39;=b\cdot p^{B}\ ,\ f_{n-1}=c\cdot p^{C}\ ,\ f_{n}=d\cdot p^D\ ( \ a,b,c,d\perp p)   \]</span> 原方程化为： <span class="math display">\[   a\times p^A\cdot c\times p^C+b\times p^B\cdot d\times p^D\equiv 0\pmod{p^\alpha}   \]</span></p><p><span class="math display">\[   (ac)\times p^{A+C}+(bd)\times p^{B+D}\equiv 0\pmod{p^\alpha}   \]</span></p><p>这个方程成立有两种情况：</p><ol type="1"><li><span class="math inline">\(A+C\ge \alpha\)</span>,<span class="math inline">\(B+D\ge \alpha\)</span>。</li><li><span class="math inline">\(ac\equiv bd\pmod{p^{\alpha-(A+C)}}\)</span>，且 <span class="math inline">\(A+C=B+D\)</span></li></ol><p>成立条件：</p><ol type="1"><li><p>在线处理 <span class="math inline">\(C\ge \alpha-A,D\ge \alpha-B\)</span> 相当于二维数点（可能会有简单方法？）（由于 <span class="math inline">\(A,B,C,D\)</span> 都很小直接暴力就行）。</p></li><li><p>显然等价: <span class="math display">\[\frac{a}{b}\equiv \frac{d}{c}\pmod{p^{\alpha-(A+C)}},A-B=D-C\]</span></p></li><li><p>预处理 ，对每一个 <span class="math inline">\(m\)</span> 的质因数 <span class="math inline">\(p_i\)</span>，首先处理出成立条件 <span class="math inline">\(1\)</span> 成立的答案。其次考虑成立条件 <span class="math inline">\(2\)</span> ,预处理的过程此时我们知道 <span class="math inline">\(C,c,D,d,\alpha\)</span> ，不知道 <span class="math inline">\(A,a,B,b\)</span> 。发现 <span class="math inline">\(A\leq \log_{p}^{m}\)</span> , 即<span class="math inline">\(A\)</span> 的值域很小 ，此时暴力枚举 <span class="math inline">\(A\)</span> ，此时可以计算出 <span class="math inline">\(B\)</span> 的取值，从而可以处理出 <span class="math inline">\(\frac{d}{c}\bmod p^{\alpha-(A+C)}\)</span>,将其存进表。</p></li></ol><p>不难发现，此处复杂度为枚举 <span class="math inline">\(A\)</span> 的复杂度，即 <span class="math inline">\(\mathcal{O(\sum\limits _{i=1}^{k}p_i^{\alpha_i}\alpha_i)}\)</span>或者<span class="math inline">\(\mathcal{O(\sum\limits _{i=1}^{k}p_i^{\alpha_i}\alpha_i^2)}\)</span> 。(看你成立条件 <span class="math inline">\(1\)</span> 的具体处理方法)。</p><p>询问时候，对于每个 <span class="math inline">\(m\)</span> 的质因数 <span class="math inline">\(p_i\)</span> ，我们可以枚举 <span class="math inline">\(C\)</span> 然后，可以算出 <span class="math inline">\(\frac{a}{b} \bmod {p^{\alpha-(A+C)}}\)</span> 的值，暴力查表，找到一组特解。</p><p>不难发现，此处的复杂度为枚举 <span class="math inline">\(C\)</span> 的复杂度，和寻找循环节的复杂度，即 <span class="math inline">\(\mathcal{O(\sum\limits_{i=1}^{k}d(3p_i^{\alpha_i})+\sum \limits _{i=1}^k\alpha_i)}\)</span>。</p><p>代码写的可能比较丑。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;tr1/unordered_map&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> int long long</span><br><span class="hljs-keyword">int</span> T,m;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">read</span><span class="hljs-params">(<span class="hljs-keyword">int</span> &amp;x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">char</span> c=getchar();x=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(c&gt;<span class="hljs-string">&#x27;9&#x27;</span>||c&lt;<span class="hljs-string">&#x27;0&#x27;</span>) c=getchar();<br>    <span class="hljs-keyword">while</span>(c&lt;=<span class="hljs-string">&#x27;9&#x27;</span>&amp;&amp;c&gt;=<span class="hljs-string">&#x27;0&#x27;</span>) x=(x&lt;&lt;<span class="hljs-number">1</span>)+(x&lt;&lt;<span class="hljs-number">3</span>)+c-<span class="hljs-string">&#x27;0&#x27;</span>,c=getchar();<br>&#125;<br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; divs[<span class="hljs-number">300010</span>];<br><span class="hljs-keyword">int</span> p[<span class="hljs-number">10</span>],k[<span class="hljs-number">10</span>],t[<span class="hljs-number">10</span>],loop[<span class="hljs-number">10</span>];<br><span class="hljs-keyword">int</span> f[<span class="hljs-number">10</span>][<span class="hljs-number">300010</span>];<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">gcd</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a,<span class="hljs-keyword">int</span> b)</span></span>&#123;<span class="hljs-keyword">if</span>(b==<span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> a;<span class="hljs-keyword">return</span> gcd(b,a%b);&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">qpow</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a,<span class="hljs-keyword">int</span> b,<span class="hljs-keyword">int</span> p)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> k=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(b)&#123;<span class="hljs-keyword">if</span>(b&amp;<span class="hljs-number">1</span>) k=k*a%p;a=a*a%p,b=b&gt;&gt;<span class="hljs-number">1</span>;&#125;<span class="hljs-keyword">return</span> k;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">ppow</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a,<span class="hljs-keyword">int</span> b)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> k=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(b)&#123;<span class="hljs-keyword">if</span>(b&amp;<span class="hljs-number">1</span>) k=k*a;a=a*a,b=b&gt;&gt;<span class="hljs-number">1</span>;&#125;<span class="hljs-keyword">return</span> k;<br>&#125;<br><span class="hljs-keyword">namespace</span> Inv<br>&#123;<br>    <span class="hljs-keyword">int</span> phi[<span class="hljs-number">100010</span>],pr[<span class="hljs-number">100010</span>],p[<span class="hljs-number">100010</span>],tot=<span class="hljs-number">0</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">2</span>;i&lt;=<span class="hljs-number">100000</span>;i++)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(pr[i]==<span class="hljs-number">0</span>) p[++tot]=i,phi[i]=i<span class="hljs-number">-1</span>;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">1</span>;j&lt;=tot&amp;&amp;p[j]*i&lt;=<span class="hljs-number">100000</span>;j++)<br>            &#123;<br>                pr[i*p[j]]=<span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">if</span>(i%p[j]==<span class="hljs-number">0</span>)<br>                &#123;<br>                    phi[i*p[j]]=p[j]*phi[i];<span class="hljs-keyword">break</span>;<br>                &#125;<br>                phi[i*p[j]]=(p[j]<span class="hljs-number">-1</span>)*phi[i];<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">inv</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> m)</span></span>&#123;<span class="hljs-keyword">return</span> qpow(x,phi[m]<span class="hljs-number">-1</span>,m);&#125;<br>&#125;<br><br>inline pair&lt;int,int&gt; nump(int x,int p,int ki)<br>&#123;<br>    <span class="hljs-keyword">int</span> k=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span>(x==<span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-built_in">make_pair</span>(ki,<span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">while</span>(x%p==<span class="hljs-number">0</span>) k++,x/=p;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">make_pair</span>(min(k,ki),x);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">exgcd</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a,<span class="hljs-keyword">int</span> b,<span class="hljs-keyword">int</span> &amp;x,<span class="hljs-keyword">int</span> &amp;y)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(b==<span class="hljs-number">0</span>)&#123;x=<span class="hljs-number">1</span>,y=<span class="hljs-number">0</span>;<span class="hljs-keyword">return</span> ;&#125;<br>    exgcd(b,a%b,y,x); y-=(a/b)*x;<br>&#125;<br><span class="hljs-keyword">int</span> can[<span class="hljs-number">10</span>][<span class="hljs-number">20</span>][<span class="hljs-number">20</span>];<br>tr1::<span class="hljs-built_in">unordered_map</span>&lt;<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span>&gt; z[<span class="hljs-number">10</span>][<span class="hljs-number">20</span>][<span class="hljs-number">20</span>][<span class="hljs-number">40</span>];<br><span class="hljs-function"><span class="hljs-keyword">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    Inv::init();<br>    read(T),read(m);<br>    <span class="hljs-keyword">int</span> mm=m;<br>    <span class="hljs-keyword">int</span> tot=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">2</span>;i*i&lt;=m;i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(m%i==<span class="hljs-number">0</span>)<br>        &#123;<br>            p[++tot]=i;t[tot]=<span class="hljs-number">1</span>;k[tot]=<span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">while</span>(m%i==<span class="hljs-number">0</span>) m/=i,t[tot]*=i,k[tot]++;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">int</span> MAXX=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span>(m&gt;<span class="hljs-number">1</span>) p[++tot]=m,t[tot]=m,k[tot]=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=tot;i++)<br>    &#123;<br>        f[i][<span class="hljs-number">0</span>]=<span class="hljs-number">0</span>;f[i][<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">2</span>;j&lt;=<span class="hljs-number">6</span>*t[i];j++)<br>        &#123;<br>            <br>            f[i][j]=(f[i][j<span class="hljs-number">-1</span>]+f[i][j<span class="hljs-number">-2</span>])%t[i]; <br>            <span class="hljs-keyword">if</span>(f[i][j<span class="hljs-number">-1</span>]==<span class="hljs-number">0</span>&amp;&amp;f[i][j]==<span class="hljs-number">1</span>)<br>            &#123;<br>                loop[i]=j<span class="hljs-number">-1</span>; <span class="hljs-comment">// 0-&gt; loop -&gt; 2loop ...and so on </span><br>                MAXX=max(MAXX,loop[i]);<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span>&gt; vc=nump(f[i][j<span class="hljs-number">-1</span>],p[i],k[i]),vd=nump(f[i][j],p[i],k[i]);<br>            <span class="hljs-keyword">int</span> C=vc.first,c=vc.second,D=vd.first,d=vd.second;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> a=max(<span class="hljs-number">0ll</span>,k[i]-C);a&lt;=k[i];a++) <br>                <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> b=max(<span class="hljs-number">0ll</span>,k[i]-D);b&lt;=k[i];b++) can[i][a][b]=j;<br>            <span class="hljs-keyword">int</span> tmp=ppow(p[i],k[i]-C);<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> A=<span class="hljs-number">0</span>;A+C&lt;k[i];A++)<br>            &#123;<br>                <span class="hljs-keyword">int</span> res=d*Inv::inv(c,tmp)%tmp;<br>                <span class="hljs-keyword">if</span>(z[i][A][D-C+k[i]][C].count(res)==<span class="hljs-number">0</span>)<br>                z[i][A][D-C+k[i]][C][res]=j;<br>                tmp/=p[i];<br>            &#125;<span class="hljs-comment">// z : p_i , A -&gt; D-C  -&gt; d/c</span><br>        &#125; <br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">2</span>;j&lt;=loop[i]*<span class="hljs-number">2</span>;j++) f[i][j]=(f[i][j<span class="hljs-number">-1</span>]+f[i][j<span class="hljs-number">-2</span>])%t[i];<br>    &#125;<br>    <span class="hljs-comment">/////////////////</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=MAXX;i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">1</span>;j*i&lt;=MAXX;j++) divs[i*j].push_back(i);<br>    &#125;<br>    m=mm;<br>    <span class="hljs-keyword">int</span> a0=<span class="hljs-number">0</span>,m0=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(T--)<br>    &#123;<br>        <span class="hljs-keyword">int</span> a,b,aa,bb,A,B;<br>        read(aa),read(bb);<br>        aa%=m,bb%=m;<br>        <span class="hljs-keyword">if</span>(aa==<span class="hljs-number">0</span>) &#123;<span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-number">0</span>&lt;&lt;<span class="hljs-built_in">endl</span>;;<span class="hljs-keyword">continue</span>;&#125;<br>        <span class="hljs-keyword">if</span>(bb==<span class="hljs-number">0</span>) &#123;<span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-number">1</span>&lt;&lt;<span class="hljs-built_in">endl</span>;<span class="hljs-keyword">continue</span>;&#125;<br>        a0=<span class="hljs-number">0</span>,m0=<span class="hljs-number">1</span>;<span class="hljs-keyword">bool</span> FLG=<span class="hljs-number">0</span>,fag=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=tot;i++)<br>        &#123;<br>            <span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span>&gt; va=nump(aa,p[i],k[i]),vb=nump(bb,p[i],k[i]);<br>            a=va.second,A=va.first;<br>            b=vb.second,B=vb.first;<br>            <span class="hljs-keyword">int</span> ans=<span class="hljs-number">-1</span>,tmp;<br>            <span class="hljs-keyword">if</span>(aa%t[i]==<span class="hljs-number">0</span>) &#123;ans=<span class="hljs-number">0</span>;<span class="hljs-keyword">goto</span> chk;&#125;<br>            <span class="hljs-keyword">if</span>(bb%t[i]==<span class="hljs-number">0</span>) &#123;ans=<span class="hljs-number">1</span>;<span class="hljs-keyword">goto</span> chk;&#125;<br>            <span class="hljs-keyword">if</span>(can[i][A][B]!=<span class="hljs-number">0</span>) &#123;ans=can[i][A][B];<span class="hljs-keyword">goto</span> chk;&#125;<br>            <span class="hljs-keyword">if</span>((a*f[i][<span class="hljs-number">0</span>]+b*f[i][<span class="hljs-number">1</span>])%t[i]==<span class="hljs-number">0</span>)&#123;ans=<span class="hljs-number">1</span>;<span class="hljs-keyword">goto</span> chk;&#125;<br>            tmp=ppow(p[i],k[i]-A);<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> C=<span class="hljs-number">0</span>;A+C&lt;k[i];C++)<br>            &#123;<br>                <span class="hljs-keyword">int</span> res=a*Inv::inv(b,tmp)%tmp;<br>                res=-res+tmp+tmp;<br>                res%=tmp;<br>                <span class="hljs-keyword">if</span>(z[i][A][A-B+k[i]][C].count(res))<br>                &#123;<br>                    ans=z[i][A][A-B+k[i]][C][res];<br>                    <span class="hljs-keyword">goto</span> chk;<br>                &#125;<br>                tmp/=p[i];<br>            &#125;<br>            chk:;<br>            ans%=loop[i];<br>            <span class="hljs-keyword">if</span>(ans==<span class="hljs-number">-1</span>) &#123;<br>                FLG=<span class="hljs-number">1</span>;<br>                <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-number">-1</span>&lt;&lt;<span class="hljs-built_in">endl</span>;<span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-keyword">int</span> M=<span class="hljs-number">0</span>,A=ans;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> x:divs[loop[i]])<br>            &#123;<br>                <span class="hljs-keyword">if</span>((aa*f[i][x+ans<span class="hljs-number">-1</span>]+bb*f[i][x+ans])%t[i]==<span class="hljs-number">0</span>) <br>                &#123;<br>                    M=x;<span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>            <span class="hljs-comment">/////////////////////////////////////</span><br>            <span class="hljs-keyword">int</span> g=gcd(M,m0);<br>            <span class="hljs-keyword">if</span>(<span class="hljs-built_in">abs</span>(A-a0)%g!=<span class="hljs-number">0</span>)&#123;<br>                fag=<span class="hljs-number">1</span>;<span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-number">-1</span>&lt;&lt;<span class="hljs-built_in">endl</span>;<span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-keyword">int</span> x,y;<br>            exgcd(m0/g,M/g,x,y);<br>            x%=(M/g),x+=(M/g),x%=(M/g);<br>            <span class="hljs-keyword">int</span> MM=m0;<br>            m0=m0/g*M;x=x*((A-a0)/g)%m0+m0;x%=m0;<br>            a0=x%m0*MM%m0+a0;a0%=m0;<br>            a0+=m0;a0%=m0;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(FLG==<span class="hljs-number">1</span>||fag==<span class="hljs-number">1</span>) <span class="hljs-keyword">continue</span>;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>,a0);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>点分治</title>
    <link href="/2021/02/13/point-divide/"/>
    <url>/2021/02/13/point-divide/</url>
    
    <content type="html"><![CDATA[<p>点分治 &amp; 点分树 的一些理解。</p><a id="more"></a><h2 id="点分治">点分治</h2><h3 id="什么是点分治">什么是点分治</h3><p>点分治，是树分治的一种。</p><p>树分治包括了点分治，边分治，链分治。</p><p>点分治主要处理两点间路径信息的问题。</p><h3 id="点分治怎么用">点分治怎么用</h3><p>拿最基本的<a href="https://www.luogu.com.cn/problem/P3806">问题</a>入手，给你一棵树，让你统计树上距离为 <span class="math inline">\(k\)</span> 的点对个数。</p><p>形式的说 <span class="math inline">\(\sum\limits_{i=1}^{n}\sum\limits_{j=1}^{n}[dist(i,j)=k]\)</span>。</p><h4 id="naive-sol1"><span class="math inline">\(naive\ sol1\)</span></h4><p>当我们知道一个端点 <span class="math inline">\(i\)</span> 的时候，我们可以 <span class="math inline">\(\mathcal{O(n)}\)</span> 的求出该点的贡献，每个点都 <span class="math inline">\(\mathcal{O(n)}\)</span> 计算，总复杂度<span class="math inline">\(\mathcal{O(n^2)}\)</span>。</p><h4 id="naive-sol2"><span class="math inline">\(naive\ sol2\)</span></h4><p>考虑分治，随机选一个点 <span class="math inline">\(u\)</span> ，把点 <span class="math inline">\(u\)</span> 删掉，算出剩下的每个连通块的子问题和。同时把经过点 <span class="math inline">\(u\)</span> 的链的答案统计出来。</p><p>由于分治，复杂度为 <span class="math inline">\(\mathcal{O(dep\times n)}\)</span> ,<span class="math inline">\(dep\)</span> 为分治层数。</p><h4 id="right-sol"><span class="math inline">\(right\ sol\)</span></h4><p>发现让分治层数最小，本质上是让每次分治时产生的最大的连通块最小。因为此时分治层数可以看成最大的连通块变成 <span class="math inline">\(1\)</span> 的次数。</p><p>发现这个定义本质上就是找重心。在重心心处分治。</p><p>由于中心的性质，每一次分割后产生的最大的连通块 <span class="math inline">\(maxsz\leq\lceil\frac{sz}{2}\rceil\)</span></p><p>所以 <span class="math inline">\(dep\)</span> 一定是 <span class="math inline">\(O(\log_{2}n)\)</span> 级别的。</p><p>至于合并，也就一个 <span class="math inline">\(O(sz)\)</span> 解决的问题。</p><hr /><h2 id="点分树">点分树</h2><h3 id="什么是点分树">什么是点分树</h3><p>假如当前重心为 <span class="math inline">\(u\)</span> 我们把删去 <span class="math inline">\(u\)</span> 之后产生的新重心 <span class="math inline">\(v_{1,2,\cdots,k}\)</span> 向 <span class="math inline">\(u\)</span> 连边。</p><p>不难发现最终形态是一棵树。</p><p>我们把这棵树称作点分树。</p><h3 id="点分树有什么用">点分树有什么用</h3><p>观察点分治，我们每次合并答案都只在该连通块的重心处合并该连通块内的贡献。</p><p>所以假如谈一个点 <span class="math inline">\(u\)</span> 的贡献，那么他只可能在 <span class="math inline">\(u\)</span> 点，使 <span class="math inline">\(u\)</span> 点单独成为连通块所删除的重心 <span class="math inline">\(v\)</span>，使 <span class="math inline">\(v\)</span> 点所在连通块被从一个大连通块剥离出来而删的重心 <span class="math inline">\(z\)</span>，and so on 。</p><p>发现产生贡献的重心，全都在 点分树中 <span class="math inline">\(u\)</span> 到根的路径上。</p><p>所以我们统计答案相当于在统计一条链，而这个链的长度是 <span class="math inline">\(\mathcal{O(\log_2n)}\)</span> 级别的。</p><p>所以我们可以通过点分树来维护一些更难于直接记录的信息，以及一些修改操作。</p><p>对于点分治，点分树，有一点需要注意。</p><p>为什么点分治是对的？原因就在于，通过在重心时对链的合并，本质上就已经完成枚举树上的每一条路径了。</p><p>所以点分治本质上和那个 <span class="math inline">\(\mathcal{O(n^2)}\)</span> 的暴力时一样在枚举路径的。</p><p>所以在看到有树上问题问路径的一些情况，不妨考虑一下点分治。</p><h2 id="练手推荐">练手推荐</h2><p><a href="https://www.luogu.com.cn/problem/P6329">震波</a></p><p><a href="https://www.luogu.com.cn/problem/P2056">捉迷藏</a></p><p><a href="https://www.luogu.com.cn/problem/P4115">Qtree4</a></p><p><a href="https://www.luogu.com.cn/problem/P3241">开店</a></p><p><a href="https://www.luogu.com.cn/problem/P2664">树上游戏</a></p><p>本人实力有限，都是模板题了/kk</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
